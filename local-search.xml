<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ELF</title>
    <link href="/2023/11/17/ELF/"/>
    <url>/2023/11/17/ELF/</url>
    
    <content type="html"><![CDATA[<h1 id="ELF-文件构成"><a href="#ELF-文件构成" class="headerlink" title="ELF 文件构成"></a>ELF 文件构成</h1><p><img src="/2023/11/17/ELF/image-20231117150540600.png" alt="image-20231117150540600"></p><h3 id="General-Introduction"><a href="#General-Introduction" class="headerlink" title="General Introduction"></a>General Introduction</h3><p>An <em>ELF header</em> resides at the beginning and holds a “road map’’ describing the file’s </p><p>organization. <em>Sections</em> hold the bulk of object file information for the linking view: instructions, </p><p>data, symbol table, relocation information, and so on. Descriptions of special sections appear </p><p>later in this section. Chapter 2 also describes <em>segments</em> and the program execution view of the </p><p>file.</p><p>A <em>program header table</em>, if present, tells the system how to create a process image. Files used </p><p>to build a process image (execute a program) must have a program header table; relocatable </p><p>files do not need one. A <em>section header table</em> contains information describing the file’s sections. </p><p>Every section has an entry in the table; each entry gives information such as the section name, </p><p>the section size, and so on. Files used during linking must have a section header table; other </p><p>object files may or may not have one. </p><ul><li><p>data representation:</p><p>  <img src="/2023/11/17/ELF/image-20231117150725395.png" alt="image-20231117150725395"></p></li><li></li></ul><h3 id="ELF-header"><a href="#ELF-header" class="headerlink" title="ELF header"></a>ELF header</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint64_t</span> Elf64_Addr;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint64_t</span> Elf64_Off;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EI_NIDENT 16</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> e_ident[EI_NIDENT];  <span class="hljs-comment">// 最开头是16个字节的e_ident, 其中包含用以表示ELF文件的字符，以及其他一些与机器无关的信息。开头的4个字节值固定不变，为0x7f和ELF三个字符。</span><br>    <span class="hljs-type">uint16_t</span>      e_type;  <span class="hljs-comment">// 该文件的类型 2字节</span><br>    <span class="hljs-type">uint16_t</span>      e_machine;  <span class="hljs-comment">// 该程序需要的体系架构 2字节</span><br>    <span class="hljs-type">uint32_t</span>      e_version;  <span class="hljs-comment">// 文件的版本 4字节</span><br>    Elf64_Addr   e_entry;  <span class="hljs-comment">// 程序的入口地址 8字节</span><br>    Elf64_Off      e_phoff;  <span class="hljs-comment">// Program header table 在文件中的偏移量 8字节</span><br>    Elf64_Off      e_shoff;  <span class="hljs-comment">// Section header table 在文件中的偏移量 8字节</span><br>    <span class="hljs-type">uint32_t</span>      e_flags;  <span class="hljs-comment">// 对IA32而言，此项为0。 4字节</span><br>    <span class="hljs-type">uint16_t</span>      e_ehsize;  <span class="hljs-comment">// 表示ELF header大小 2字节</span><br>    <span class="hljs-type">uint16_t</span>      e_phentsize;  <span class="hljs-comment">// 表示Program header table中每一个条目的大小 2字节</span><br>    <span class="hljs-type">uint16_t</span>      e_phnum;  <span class="hljs-comment">// 表示Program header table中有多少个条目 2字节</span><br>    <span class="hljs-type">uint16_t</span>      e_shentsize;  <span class="hljs-comment">// 表示Section header table中的每一个条目的大小 2字节</span><br>    <span class="hljs-type">uint16_t</span>      e_shnum;  <span class="hljs-comment">// 表示Section header table中有多少个条目 2字节</span><br>    <span class="hljs-type">uint16_t</span>      e_shstrndx;  <span class="hljs-comment">// 包含节名称的字符串是第几个节 2字节</span><br>&#125; Elf64_Ehdr;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vim使用技巧</title>
    <link href="/2023/11/09/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/11/09/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="vim使用记录"><a href="#vim使用记录" class="headerlink" title="vim使用记录"></a>vim使用记录</h1><h2 id="1-基础模式"><a href="#1-基础模式" class="headerlink" title="1.基础模式"></a>1.基础模式</h2><ul><li>normal模式:idle状态</li><li>insert模式:<ul><li><strong>i</strong>   光标前</li><li><strong>a</strong>       光标后</li></ul></li><li>replace模式:R</li><li>选取模式<ul><li>visual:<strong>v</strong></li><li>visual-line:<strong>shift-v</strong></li><li>visual-block:<strong>CTRL-v</strong></li></ul></li><li>command-line:<strong>:</strong></li></ul><h2 id="2-指令拾遗"><a href="#2-指令拾遗" class="headerlink" title="2.指令拾遗"></a>2.指令拾遗</h2><ul><li><p>多个窗口查看一片或者多片buffer:</p><ul><li><strong>:sp</strong>:创建另一个窗口查看当前的文件</li><li><strong>tabnew</strong>:</li><li><strong>gt:shift between those tabs</strong></li></ul></li><li><p>normal模式查找某个word:</p><ul><li><strong>&#x2F;main</strong> means find the ‘main’,enter to get there,and ‘n’ for the next ‘main’</li></ul></li><li><p>normal模式下移动指令</p><ul><li>hjkl左下上右</li><li>w一个词一个词向后,b一个词一个词向前,e跳到光标所在词词尾</li><li><strong>0</strong>移动到句首,**$**移动到句尾,<strong>^</strong>移动到本行行首第一个非空白字符</li><li>ctrl+u &#x3D;&#x3D; pgup ,ctrl+d &#x3D;&#x3D; pgdn</li><li>‘H’光标移动到屏幕最顶端,’M’屏幕中间,’L’屏幕底端</li><li>gg文件开头,G文件末尾</li><li>line_number:<strong>:{number}<CR></CR></strong> or  <strong>{number}G</strong></li><li>find:fo查找本行光标后第一个o,Fo查找本行光标前第一个o</li><li>To:tr前往本行光标后第一个r前,Tr前往本行光标前第一个r后</li></ul></li><li><p>normal模式下编辑指令</p><ul><li>o:open a new line and get into insert mode</li><li>d:delete:<ul><li><strong>dw</strong>:delete a word</li><li><strong>de</strong>:delete til the end of this word.<strong>db</strong>:delete back to the begining of this word</li><li><strong>ce</strong>:delete the word and get into the insert mode</li><li><strong>dd</strong>:delete the whole line</li><li><strong>cc</strong>:delete the whole line and insert</li></ul></li><li>x:just <strong>delete</strong> the char that you are working on</li><li>r:take another argument and replace the char you’re working on</li><li>u:undo:equals to ctrl+z</li><li>ctrl+r:reverse the undo</li><li>y,p:yank and paste<ul><li><strong>yw</strong>:yank a word</li><li><strong>yy</strong>:yank the whole line</li><li><strong>yb</strong>:复制光标前单词.<strong>ye</strong>:复制光标后单词</li><li><strong>p</strong>:paste</li></ul></li></ul></li><li><p>visual模式</p><ul><li>进入visual 模式后,hjkl以及其他的移动指令都会选取从光标开始的所有文本</li><li>进入visual block模式,移动指令可以选取文本块</li><li>visual line模式:选取文本行</li></ul></li><li><p>重复性工作</p><p>使用    ‘.’     <strong>可以在新的光标处重复你 的上一个编辑工作</strong></p></li></ul><h3 id="计数指令执行"><a href="#计数指令执行" class="headerlink" title="计数指令执行"></a>计数指令执行</h3><p>举例:移动四行:normal模式下:4j(下移4行)</p><p>向后移动4个word:4w</p><p>等等</p><h3 id="修饰符a-i"><a href="#修饰符a-i" class="headerlink" title="修饰符a,i"></a>修饰符a,i</h3><p>a for  around(including) and i for inside</p><p>for example:</p><p><strong>di(</strong> means delete things inside the “()”</p><p><strong>ci[</strong> means change things inside the”[]”</p><p><strong>da(</strong> means delete things inside the “()”  including “()”</p><p><strong>ci”</strong> means change things inside the “”</p><p><em>后续待补充</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>The missing semester</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cargo</title>
    <link href="/2023/11/08/cargo/"/>
    <url>/2023/11/08/cargo/</url>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//参加rustsbi学到的</span><br><br>cargo fmt  <span class="hljs-comment">//调整代码风格</span><br><br>cargo build --target=... <span class="hljs-comment">//交叉编译,可以在target指定的环境里编译</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/11/08/algorithm/"/>
    <url>/2023/11/08/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="DP问题"><a href="#DP问题" class="headerlink" title="DP问题"></a>DP问题</h1><h4 id="P0005折线分割平面问题"><a href="#P0005折线分割平面问题" class="headerlink" title="P0005折线分割平面问题"></a>P0005折线分割平面问题</h4><p>题目:</p><p><img src="/2023/11/08/algorithm/image-20231108174122624.png" alt="image-20231108174122624"></p><p>明确几点:</p><ul><li>增加第n条折线,要想让分割平面尽可能多,折线的两个射线边必须要和之前 n-1 条折线都相交,在这两条射线上各自形成2(n-1)个交点.也就是各自形成了2(n-1)条线段和两条被截短的射线</li><li>每形成一个线段,就会增加一个平面,每增加一个射线就会增加一个平面</li><li>最重要的是别忘了折线的角所在点所衍生了两个线段,但是<em>就增加一个平面</em></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">递推关系:<br><span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(n)</span></span> = <span class="hljs-built_in">f</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-number">4</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lishuhuakai/article/details/8518245">具体解析</a></p><h4 id="P0006健身房卡路里问题"><a href="#P0006健身房卡路里问题" class="headerlink" title="P0006健身房卡路里问题"></a>P0006健身房卡路里问题</h4><p>题目:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">夏天要到了，小西和小瓜决定去健身。健身房是一个n行m列的矩阵。a[i][j]代表在第i行第j列，可以消耗的卡路里。<br><br>小西从第1行第1列出发，要到(n,m);小西可以从a[i][j]，走到a[i+1][j],或者a[i][j+1];<br><br>小瓜从(n,1)出发，要到(1,m);小瓜可以从a[i][j]出发，走到a[i-1][j],或者a[i][j+1];<br><br>由于小西和小瓜要聚在一起发张自拍，他们必须在健身房的某一行，某一列相遇（仅相遇一次）。由于他们没有好好健身，所以在自拍地点的卡路里消耗不计入总卡路里消耗值。你的任务是求出小西和小瓜可以消耗的最大总卡路里值。<br><br>输入描述<br>第一行包含两个整数，n,m(3&lt;=n,m&lt;=1000)，代表健身房的行、列数，接下来的i行j列代表a[i][j]（(0&lt;=a[i][j]&lt;=10<span class="hljs-built_in">^</span>5），即在第i行，j列可以燃烧的卡路里。<br><br>输出描述<br>输出一个整数：即他们可能消耗的总卡路里的总和的最大值。<br></code></pre></td></tr></table></figure><p><img src="/2023/11/08/algorithm/image-20231109010759333.png" alt="image-20231109010759333"></p><p>题解:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">显然，设两人在<span class="hljs-built_in">O</span>点相遇，<span class="hljs-variable">lahub</span>只能从<span class="hljs-number">1</span>或者<span class="hljs-number">2</span>走到<span class="hljs-built_in">O</span>，如果他从<span class="hljs-number">1</span>走到<span class="hljs-built_in">O</span>，那他的路线就是<span class="hljs-number">1</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">3</span>，则<span class="hljs-variable">Iahubina</span>就是<span class="hljs-number">4</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">2</span>，同理可知，若<span class="hljs-variable">lahub</span>是从<span class="hljs-number">2</span>走到<span class="hljs-built_in">O</span>，他的路线一定是<span class="hljs-number">2</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">4</span><span class="hljs-operator">,</span><span class="hljs-variable">Iahubina</span>就是<span class="hljs-number">1</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">3</span>。<br><br>所以，易得出最终解为<span class="hljs-variable">max</span>（<span class="hljs-variable">A</span>到<span class="hljs-number">1</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">3</span>到<span class="hljs-built_in">C</span>最大值<span class="hljs-operator">+</span><span class="hljs-built_in">D</span>到<span class="hljs-number">4</span>最大 值<span class="hljs-operator">+</span><span class="hljs-number">2</span>到<span class="hljs-variable">B</span>的最大值，<span class="hljs-variable">A</span>到<span class="hljs-number">2</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">4</span>到<span class="hljs-built_in">C</span>最大 值<span class="hljs-operator">+</span><span class="hljs-built_in">D</span>到<span class="hljs-number">1</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">3</span>到<span class="hljs-variable">B</span>最大值）。<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/solution/CF429B">题目详解</a></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp1[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp2[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp3[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp4[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<span class="hljs-comment">//用四个dp数组存放最大值</span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;a[i][j]);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">memset</span>(dp1,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp1));<br><span class="hljs-built_in">memset</span>(dp2,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp2));<br><span class="hljs-built_in">memset</span>(dp3,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp3));<br><span class="hljs-built_in">memset</span>(dp4,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp4));<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        dp1[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp1[i<span class="hljs-number">-1</span>][j],dp1[i][j<span class="hljs-number">-1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>        dp2[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp2[i+<span class="hljs-number">1</span>][j],dp2[i][j+<span class="hljs-number">1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        dp3[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp3[i+<span class="hljs-number">1</span>][j],dp3[i][j<span class="hljs-number">-1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>        dp4[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp4[i<span class="hljs-number">-1</span>][j],dp4[i][j+<span class="hljs-number">1</span>]);&#125;&#125;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;m;j++)<br>        &#123;<br>        x=<span class="hljs-built_in">max</span>(x,dp1[i][j<span class="hljs-number">-1</span>]+dp2[i][j+<span class="hljs-number">1</span>]+dp3[i+<span class="hljs-number">1</span>][j]+dp4[i<span class="hljs-number">-1</span>][j]);<br>        x=<span class="hljs-built_in">max</span>(x,dp1[i<span class="hljs-number">-1</span>][j]+dp2[i+<span class="hljs-number">1</span>][j]+dp3[i][j<span class="hljs-number">-1</span>]+dp4[i][j+<span class="hljs-number">1</span>]);&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0007-Toss-the-coin"><a href="#P0007-Toss-the-coin" class="headerlink" title="P0007 Toss the coin"></a>P0007 Toss the coin</h4><p>题目:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Toss is <span class="hljs-keyword">an</span> important part <span class="hljs-keyword">of</span> <span class="hljs-keyword">any</span> event. When everything becomes equal toss is <span class="hljs-keyword">the</span> ultimate decider. Normally <span class="hljs-keyword">a</span> fair coin is used <span class="hljs-keyword">for</span> Toss. A coin has <span class="hljs-literal">two</span> sides head(H) <span class="hljs-keyword">and</span> tail(T). Superstition may work <span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">of</span> choosing head <span class="hljs-keyword">or</span> tail. If anyone becomes winner choosing head he always wants <span class="hljs-built_in">to</span> choose head. Nobody believes that his winning chance is <span class="hljs-number">50</span><span class="hljs-number">-50.</span> However <span class="hljs-keyword">in</span> this problem we will deal <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> fair coin <span class="hljs-keyword">and</span> n times tossing <span class="hljs-keyword">of</span> such <span class="hljs-keyword">a</span> coin. The <span class="hljs-built_in">result</span> <span class="hljs-keyword">of</span> such <span class="hljs-keyword">a</span> tossing can be represented <span class="hljs-keyword">by</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">string</span>. Such <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> <span class="hljs-number">3</span> times tossing is used <span class="hljs-keyword">then</span> there are possible <span class="hljs-number">8</span> outcomes.<br><br>HHH HHT HTH HTT THH THT TTH TTT<br><br>As <span class="hljs-keyword">the</span> coin is fair we can consider that <span class="hljs-keyword">the</span> probability <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> outcome is also equal. For simplicity we can consider that <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> same thing is repeated <span class="hljs-number">8</span> times we can expect <span class="hljs-built_in">to</span> <span class="hljs-built_in">get</span> <span class="hljs-keyword">each</span> possible sequence once.The Problem<br><br>In <span class="hljs-keyword">the</span> above example we see <span class="hljs-number">1</span> sequnce has <span class="hljs-number">3</span> consecutive H, <span class="hljs-number">3</span> sequence has <span class="hljs-number">2</span> consecutive H <span class="hljs-keyword">and</span> <span class="hljs-number">7</span> sequence has <span class="hljs-keyword">at</span> least single H. You have <span class="hljs-built_in">to</span> generalize <span class="hljs-keyword">it</span>. Suppose <span class="hljs-keyword">a</span> coin is tossed n times. And <span class="hljs-keyword">the</span> same <span class="hljs-built_in">process</span> is repeated <span class="hljs-number">2</span>^n times. How many sequence you will <span class="hljs-built_in">get</span> which <span class="hljs-keyword">contains</span> <span class="hljs-keyword">a</span> consequnce <span class="hljs-keyword">of</span> H <span class="hljs-keyword">of</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">at</span> least k.<br><br>有n张牌，求出至少有k张牌连续是正面的排列的种数。（<span class="hljs-number">1</span>=&lt;k&lt;=n&lt;=<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>解法还是分治,这里参考较为简单的题目:k为3的情况下该怎么思考:<a href="https://blog.csdn.net/It_BeeCoder/article/details/52863471?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-52863471-blog-50978504.235%5Ev38%5Epc_relevant_sort_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-52863471-blog-50978504.235%5Ev38%5Epc_relevant_sort_base3&utm_relevant_index=2">危险的组合</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. n个盒子排成一行，如果把第一个盒子拿掉，剩下的n-<span class="hljs-number">1</span>个盒子里面满足条件，有cnt(n-<span class="hljs-number">1</span>)种，第一个盒子有<span class="hljs-number">2</span>种情况：放铀或者铅，因此这种情况共有 <span class="hljs-number">2</span>*cnt(n-<span class="hljs-number">1</span>) 种。<br><br><span class="hljs-attribute">2</span>. n个盒子排成一行，如果把第一个盒子拿掉，剩下的n-<span class="hljs-number">1</span>个盒子不满足条件，那么只有当前三个盒子是铀，第四个盒子是铅才可以。（注：第四个盒子如果是铀，那么<span class="hljs-number">234</span>盒子就满足条件了）。pow(<span class="hljs-number">2</span>, n-<span class="hljs-number">4</span>)是n-<span class="hljs-number">4</span>盒子的所有情况，减去cnt(n-<span class="hljs-number">4</span>)后n-<span class="hljs-number">4</span>盒子满足条件的（因为本部分讨论的是“如果把第一个盒子拿掉，剩下的n-<span class="hljs-number">1</span>个盒子不满足条件”）。<br><span class="hljs-attribute">cnt</span>(n)=<span class="hljs-number">2</span>*cnt(n-<span class="hljs-number">1</span>) +pow(<span class="hljs-number">2</span>,n-<span class="hljs-number">4</span>)-cnt(n-<span class="hljs-number">4</span>)；接下来编写程序就可以了。<br></code></pre></td></tr></table></figure><p>以此,将k作为变量加入思考还是可以想出来的.问题在于这题数值特别的大,需要自己写大数来解决,这里参考网上一篇<a href="https://blog.csdn.net/tengfei461807914/article/details/72560683">解答</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">200</span>;<span class="hljs-comment">/*精度位数*/</span><br><span class="hljs-comment">/*(必选)类与基础功能定义，用法类似于unsigned(非负)*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bign</span><br>&#123;<br>    <span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp;,bign&amp;);<span class="hljs-comment">/*输入运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*输出运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*加号运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*乘号运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">int</span>);<span class="hljs-comment">/*高精度乘以低精度乘法友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*减号运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*除法运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>%(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*模运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-built_in">operator</span>&lt;(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑小于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑大于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑小于等于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑大于等于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑等符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑不等符友元*/</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> len,s[maxn];<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">bign</span>()&#123;<span class="hljs-built_in">memset</span>(s,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(s));len=<span class="hljs-number">1</span>;&#125;<br>    bign <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* num)<br>    &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,ol;<br>        ol=len=<span class="hljs-built_in">strlen</span>(num);<br>        <span class="hljs-keyword">while</span>(num[i++]==<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;len&gt;<span class="hljs-number">1</span>)<br>        len--;<br>        <span class="hljs-built_in">memset</span>(s,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(s));<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>        s[i]=num[ol-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    bign <span class="hljs-keyword">operator</span>=(<span class="hljs-type">int</span> num)<br>    &#123;<br>        <span class="hljs-type">char</span> s[maxn];<br>        <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%d&quot;</span>,num);<br>        *<span class="hljs-keyword">this</span>=s;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-built_in">bign</span>(<span class="hljs-type">int</span> num)&#123;*<span class="hljs-keyword">this</span>=num;&#125;<br>    <span class="hljs-built_in">bign</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* num)&#123;*<span class="hljs-keyword">this</span>=num;&#125;<br>    <span class="hljs-function">string <span class="hljs-title">str</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> i;<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)res=<span class="hljs-built_in">char</span>(s[i]+<span class="hljs-string">&#x27;0&#x27;</span>)+res;<br>        <span class="hljs-keyword">if</span>(res==<span class="hljs-string">&quot;&quot;</span>)res=<span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*(可选)基本逻辑运算符重载*/</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span>(a.len!=b.len)<span class="hljs-keyword">return</span> a.len&lt;b.len;<br>    <span class="hljs-keyword">for</span>(i=a.len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        <span class="hljs-keyword">if</span>(a.s[i]!=b.s[i])<br>    <span class="hljs-keyword">return</span> a.s[i]&lt;b.s[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> b&lt;a;&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> !(a&gt;b);&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> !(a&lt;b);&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> a&lt;b||a&gt;b;&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> !(a&lt;b||a&gt;b);&#125;<br><span class="hljs-comment">/*(可选)加法运算符重载*/</span><br>bign <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,max=(a.len&gt;b.len?a.len:b.len),t,c;<br>    bign sum;<br>    sum.len=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,c=<span class="hljs-number">0</span>;c||i&lt;max;i++)<br>    &#123;<br>        t=c;<br>        <span class="hljs-keyword">if</span>(i&lt;a.len)t+=a.s[i];<br>        <span class="hljs-keyword">if</span>(i&lt;b.len)t+=b.s[i];<br>        sum.s[sum.len++]=t%<span class="hljs-number">10</span>;<br>        c=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">/*(可选)乘法运算符重载(高精度乘高精度)*/</span><br>bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    bign res;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a.len;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;b.len;j++)<br>        &#123;<br>            res.s[i+j]+=(a.s[i]*b.s[j]);<br>            res.s[i+j+<span class="hljs-number">1</span>]+=res.s[i+j]/<span class="hljs-number">10</span>;<br>            res.s[i+j]%=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    res.len=a.len+b.len;<br>    <span class="hljs-keyword">while</span>(res.s[res.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;res.len&gt;<span class="hljs-number">1</span>)res.len--;<br>    <span class="hljs-keyword">if</span>(res.s[res.len])res.len++;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*高精度乘以低精度(注意:必须是bign*int顺序不能颠倒,要么会与高精度乘高精度发生冲突*/</span><br>bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">int</span> b)<br>&#123;<br>    <span class="hljs-type">int</span> i,t,c=<span class="hljs-number">0</span>;<br>    bign res;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a.len;i++)<br>    &#123;<br>        t=a.s[i]*b+c;<br>        res.s[i]=t%<span class="hljs-number">10</span>;<br>        c=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    res.len=a.len;<br>    <span class="hljs-keyword">while</span>(c!=<span class="hljs-number">0</span>)<br>    &#123;<br>        res.s[i++]=c%<span class="hljs-number">10</span>;<br>        c/=<span class="hljs-number">10</span>;<br>        res.len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*(可选)减法运算符重载*/</span><br>bign <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    bign res;<br>    <span class="hljs-type">int</span> i,len=(a.len&gt;b.len)?a.len:b.len;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        res.s[i]+=a.s[i]-b.s[i];<br>        <span class="hljs-keyword">if</span>(res.s[i]&lt;<span class="hljs-number">0</span>)<br>        &#123;<br>            res.s[i]+=<span class="hljs-number">10</span>;<br>            res.s[i+<span class="hljs-number">1</span>]--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(res.s[len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;len&gt;<span class="hljs-number">1</span>)len--;<br>    res.len=len;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*(可选)除法运算符重载(注意:减法和乘法运算和&gt;=运算符必选)*/</span><br>bign <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,len=a.len;<br>    bign res,f;<br>    <span class="hljs-keyword">for</span>(i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        f=f*<span class="hljs-number">10</span>;<br>        f.s[<span class="hljs-number">0</span>]=a.s[i];<br>        <span class="hljs-keyword">while</span>(f&gt;=b)<br>        &#123;<br>            f=f-b;<br>            res.s[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(res.s[len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;len&gt;<span class="hljs-number">1</span>)len--;<br>    res.len=len;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*(可选)模运算符重载(注意:减法和乘法运算和&gt;=运算符必选)*/</span><br>bign <span class="hljs-keyword">operator</span>%(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,len=a.len;<br>    bign res,f;<br>    <span class="hljs-keyword">for</span>(i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        f=f*<span class="hljs-number">10</span>;<br>        f.s[<span class="hljs-number">0</span>]=a.s[i];<br>        <span class="hljs-keyword">while</span>(f&gt;=b)<br>        &#123;<br>            f=f-b;<br>            res.s[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><span class="hljs-comment">/*(可选)X等运算符重载(注意:X法必选)*/</span><br>bign&amp; <span class="hljs-keyword">operator</span>+=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a+b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>-=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a-b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>*=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a*b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>/=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a/b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-comment">/*可选前缀++/--与后缀++/--(注意:加法必选)*/</span><br>bign&amp; <span class="hljs-keyword">operator</span>++(bign&amp; a)<br>&#123;<br>    a=a+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>++(bign&amp; a,<span class="hljs-type">int</span>)<br>&#123;<br>    bign t=a;<br>    a=a+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>--(bign&amp; a)<br>&#123;<br>    a=a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>--(bign&amp; a,<span class="hljs-type">int</span>)<br>&#123;<br>    bign t=a;<br>    a=a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp;in,bign&amp; x)<br>&#123;<br>    string s;<br>    in&gt;&gt;s;<br>    x=s.<span class="hljs-built_in">c_str</span>();<br>    <span class="hljs-keyword">return</span> in;<br>&#125;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="hljs-type">const</span> bign&amp; x)<br>&#123;<br>    out&lt;&lt;x.<span class="hljs-built_in">str</span>();<br>    <span class="hljs-keyword">return</span> out;<br>&#125;<br>bign f[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br>bign pow2[<span class="hljs-number">201</span>];<br><span class="hljs-function">bign <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    bign ans=pow2[n-k];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n-k+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        ans+=(pow2[n-k<span class="hljs-number">-1</span>]-pow2[n-i-k+<span class="hljs-number">1</span>]*f[i<span class="hljs-number">-2</span>][k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    pow2[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">200</span>;i++)<br>        pow2[i]=pow2[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>        f[<span class="hljs-number">0</span>][i]=<span class="hljs-number">0</span>;<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>            f[i][j]=<span class="hljs-built_in">solve</span>(i,j);<br>    &#125;<br>    <span class="hljs-type">int</span> n,k;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>    &#123;<br>        cout&lt;&lt;f[n][k]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0008"><a href="#P0008" class="headerlink" title="P0008"></a>P0008</h4><p>不会写,暂存</p><h4 id="P0009-The-King’s-Ups-and-Downs"><a href="#P0009-The-King’s-Ups-and-Downs" class="headerlink" title="P0009 The King’s Ups and Downs"></a>P0009 <strong>The King’s Ups and Downs</strong></h4><p>题目:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The king wants <span class="hljs-built_in">to</span> know how many guards he needs so he can have <span class="hljs-keyword">a</span> different up <span class="hljs-keyword">and</span> down order <span class="hljs-keyword">at</span> <span class="hljs-keyword">each</span> changing <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> guard <span class="hljs-keyword">for</span> rest <span class="hljs-keyword">of</span> his reign. To be able <span class="hljs-built_in">to</span> <span class="hljs-built_in">do</span> this, he needs <span class="hljs-built_in">to</span> know <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> given <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> guards, n, how many different up <span class="hljs-keyword">and</span> down orders there are:<br><br>For example, <span class="hljs-keyword">if</span> there are <span class="hljs-literal">four</span> guards: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-number">4</span> can be arrange <span class="hljs-keyword">as</span>:<br><br><span class="hljs-number">1324</span>, <span class="hljs-number">2143</span>, <span class="hljs-number">3142</span>, <span class="hljs-number">2314</span>, <span class="hljs-number">3412</span>, <span class="hljs-number">4231</span>, <span class="hljs-number">4132</span>, <span class="hljs-number">2413</span>, <span class="hljs-number">3241</span>, <span class="hljs-number">1423</span><br><br>For this problem, you will <span class="hljs-built_in">write</span> <span class="hljs-keyword">a</span> program that takes <span class="hljs-keyword">as</span> input <span class="hljs-keyword">a</span> positive <span class="hljs-keyword">integer</span> n, <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> guards <span class="hljs-keyword">and</span> returns <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> up <span class="hljs-keyword">and</span> down orders <span class="hljs-keyword">for</span> n guards <span class="hljs-keyword">of</span> differing heights.<br><br>给一个n,求n个高矮不同的人排成一排使得高、矮依次排列的种数。<br></code></pre></td></tr></table></figure><p>题目大意就是给定n个数字,各不相同,排列成高低高低高低或者低高低高低高情况有多少种</p><ul><li><p>n个数字不相同,那么肯定可以按照递增排列出来,于是考虑按照递增来增加人数,已经有i-1个人的情况下,第i个人加入进来,因为是最高的,所以插入到队伍里面的时候,前面的序列必然是以高低结尾,后面序列是以低高开始.设插入位置前面有j个人,那么后面就有i-j-1个人.</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">设ans<span class="hljs-selector-attr">[i]</span>为<span class="hljs-selector-tag">i</span>个人按照所需排列的情况数目,dp<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[0]</span>表示<span class="hljs-selector-tag">i</span>个人已经排列好并且结尾为高低的情况,dp<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[1]</span>表示<span class="hljs-selector-tag">i</span>个人已经排列好并且开头为低高的情况<br></code></pre></td></tr></table></figure></li><li><p>因为可以插入在任意位置,j可以任意取,于是有组合数C[i-1] [j] 种情况,于是ans[i] &#x3D; dp[j] [0] * dp[i-j-1] [1] * C[i-1] [j]</p></li><li><pre><code class="c">  //这里有一点:  C[i][j] = C[i-1][j-1] + C[i-1][j]  //思路就是所取的数中含有特定的数或者不含有特定的数  <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><br>* 把i个士兵排好后无非两种情况。开始为低高。开始为高低。那么排列的逆序也满足条件。也就是说结尾为高低的方法数和开始为低高的方法数相同。而对于人数一定的情况。开始为低高的人数和开始为高低的人数相等。<br><br>* ```<br>于是 dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=ans<span class="hljs-comment">[i]</span>/2<br></code></pre></td></tr></table></figure></code></pre></li></ul><p><a href="https://blog.csdn.net/ZCY19990813/article/details/88852983?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-88852983-blog-120627982.235%5Ev38%5Epc_relevant_sort_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=4">题解</a></p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll dp[<span class="hljs-number">22</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">22</span>][<span class="hljs-number">22</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t,i,j;<br>    c[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    c[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>    &#123;<br>        c[i][<span class="hljs-number">0</span>]=c[i][i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>            c[i][j]=c[i<span class="hljs-number">-1</span>][j]+c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    &#125;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>    &#123;<br>        t=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>            t+=dp[j][<span class="hljs-number">0</span>]*dp[i-j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]*c[i<span class="hljs-number">-1</span>][j];<br>        dp[i][<span class="hljs-number">0</span>]=dp[i][<span class="hljs-number">1</span>]=t/<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll T,i,j,e,n,t;<br>    <span class="hljs-built_in">f</span>();<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        cin&gt;&gt;e&gt;&gt;n;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            cout&lt;&lt;e&lt;&lt;<span class="hljs-string">&quot; 1&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;e&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;dp[n][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0010-Number-String"><a href="#P0010-Number-String" class="headerlink" title="P0010 Number String"></a>P0010 Number String</h4><p>题目:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">The signature <span class="hljs-keyword">of</span> a permutation <span class="hljs-keyword">is</span> a <span class="hljs-built_in">string</span> <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> computed <span class="hljs-keyword">as</span> follows: <span class="hljs-keyword">for</span> each pair <span class="hljs-keyword">of</span> consecutive elements <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> permutation, <span class="hljs-built_in">write</span> down <span class="hljs-keyword">the</span> letter &#x27;I&#x27; (increasing) <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> element <span class="hljs-keyword">is</span> <span class="hljs-keyword">greater than</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> one, otherwise <span class="hljs-built_in">write</span> down <span class="hljs-keyword">the</span> letter &#x27;D&#x27; (decreasing). For example, <span class="hljs-keyword">the</span> signature <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> permutation &#123;<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>&#125; <span class="hljs-keyword">is</span> <span class="hljs-string">&quot;DIIDID&quot;</span>.<br><br>Your task <span class="hljs-keyword">is</span> <span class="hljs-keyword">as</span> follows: You are <span class="hljs-keyword">given</span> a <span class="hljs-built_in">string</span> describing <span class="hljs-keyword">the</span> signature <span class="hljs-keyword">of</span> many possible permutations, find out how many permutations satisfy this signature.<br><br>Note: For any positive <span class="hljs-built_in">integer</span> n, a permutation <span class="hljs-keyword">of</span> n elements <span class="hljs-keyword">is</span> a sequence <span class="hljs-keyword">of</span> <span class="hljs-built_in">length</span> n <span class="hljs-keyword">that</span> <span class="hljs-keyword">contains</span> each <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> integers <span class="hljs-number">1</span> <span class="hljs-keyword">through</span> n exactly once.<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">题解:<br>题解：其实第n个选择和第n<span class="hljs-number">-1</span>个选择是一样的，比如下一位是“D”，我们前面排好了<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>，现在所求为dp[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]，我们的方法是把数列里面大于等于<span class="hljs-number">2</span>的全部加<span class="hljs-number">1</span>，小于<span class="hljs-number">2</span>的不变，再把<span class="hljs-number">2</span>排到最后，这样并不会改变前面排好序列的大小关系。那么我们得到的序列就是<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span>。如果第n个是<span class="hljs-string">&quot;I&quot;</span>,我们前面排好了<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>，就将<span class="hljs-number">4</span>加到最后。设dp[i][j]为数列第i个数字为j。 <br>如果此位和前一位的关系为I，即前一位小于此位，那么前一位可能是任意小于j的数字。所以dp[i][j]=dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-2</span>]+…+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]。 也就是sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<br>如果此位和前一位的关系为D，即前一位大于此位，那么前一位可能是任意大于等于j的数字。所以dp[i][j]=dp[i<span class="hljs-number">-1</span>][i<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-1</span>][i<span class="hljs-number">-2</span>]+…+dp[i<span class="hljs-number">-1</span>][j]。也就是sum[i<span class="hljs-number">-1</span>][i<span class="hljs-number">-1</span>] - sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<br><br>但是按照上面的方法是会超限的,有一点需要优化<br>d[i][j]是一步一步计算出来的,前一个结果dp[i][j<span class="hljs-number">-1</span>]已经计算出来了,可以利用<br>在情况为I时,这里将dp[i][j] = sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]优化为 <br>dp[i][j] = dp[i][j<span class="hljs-number">-1</span>] + dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>],<br>因为dp[i][j<span class="hljs-number">-1</span>]=sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-2</span>],而sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]=sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-2</span>]+dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br><br>同理有:情况为D时,dp[i][j] = dp[i][j+<span class="hljs-number">1</span>] + dp[i<span class="hljs-number">-1</span>][j]<br>因为含有 i<span class="hljs-number">-1</span> 和j+<span class="hljs-number">1</span>项,于是外层i循环正向,内层j循环反向<br>另外实在差几毫秒过不去检测,加上了O3优化,O2也行<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(3,<span class="hljs-string">&quot;Ofast&quot;</span>,<span class="hljs-string">&quot;inline&quot;</span>)</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lvshubao1314/article/details/46793805">代码:</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">hdu4055 dp</span><br><span class="hljs-comment">题目大意：给定一个字符串，I表示本字符要比前一个字符大，D表示本字符要不前一个字符小，？可大可小，问1~n的所有排列中，</span><br><span class="hljs-comment">          有多少满足条件</span><br><span class="hljs-comment">解题思路：可以用dp[i][j]表示：处理完第i位，序列末尾位j的序列共有多少个。最后的结果为sigma&#123;dp[N][i]&#125;，1≤i≤N</span><br><span class="hljs-comment">          处理dp[1~i][]的过程中i是依次1~n相加。处理完dp[i-1][]后，加入的数即为i，而dp[i][j]是要将i放进去j换</span><br><span class="hljs-comment">          出来，而这里有一种将i放进去j换出来，同时不影响升降顺序的方法是：</span><br><span class="hljs-comment">          将dp[i-1][j]的i-1个数的序列中 ≥j 的数都加1，这样i-1变成了i，j变成了j+1，而j自然就补在后面了。</span><br><span class="hljs-comment">          所以对”ID“序列依次处理即可，初始条件：dp[1][1] = 1; 即只有&#123;1&#125;。</span><br><span class="hljs-comment">          处理‘I’：dp[i][j] = sigma&#123;dp[i-1][x]&#125;，其中1≤x≤j-1，可进一步简化，dp[i][j] = dp[i][j-1]+dp[i-1][j-1]</span><br><span class="hljs-comment">          处理‘D’：dp[i][j] = sigma&#123;dp[i-1][x]&#125;，其中j≤x≤i-1，可进一步简化，dp[i][j] = dp[i][j+1]+dp[i-1][j]</span><br><span class="hljs-comment">          处理‘?’：dp[i][j] = sigma&#123;dp[i-1][x]&#125;，其中1≤x≤i-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">char</span> a[<span class="hljs-number">1005</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a))<br>    &#123;<br>        <span class="hljs-type">int</span> n=<span class="hljs-built_in">strlen</span>(a)+<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br>        dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-type">char</span> ch=a[i<span class="hljs-number">-2</span>];<br>            <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;?&#x27;</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>                &#123;<br>                    sum=(sum+dp[i<span class="hljs-number">-1</span>][j])%mod;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>                &#123;<br>                    dp[i][j]=sum;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;I&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=i;j++)<br>                &#123;<br>                    dp[i][j]=(dp[i][j<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])%mod;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">1</span>;j--)<br>                &#123;<br>                    dp[i][j]=(dp[i][j+<span class="hljs-number">1</span>]+dp[i<span class="hljs-number">-1</span>][j])%mod;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            ans=(ans+dp[n][i])%mod;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0011-Choir"><a href="#P0011-Choir" class="headerlink" title="P0011 Choir"></a>P0011 Choir</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">题目<span class="hljs-operator">:</span><br><span class="hljs-built_in">N</span>位同学站成一排，音乐老师要请其中的<span class="hljs-punctuation">(</span><span class="hljs-built_in">N</span>−<span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span>位同学出列，使得剩下的<span class="hljs-built_in">K</span>位同学排成合唱队形。<br><br>合唱队形是指这样的一种队形：设<span class="hljs-built_in">K</span>位同学从左到右依次编号为<span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-number">2</span><span class="hljs-operator">,</span>…<span class="hljs-operator">,</span><span class="hljs-built_in">K</span>，他们的身高分别为<span class="hljs-variable">T1</span><span class="hljs-operator">,</span><span class="hljs-variable">T2</span><span class="hljs-operator">,</span>…<span class="hljs-operator">,</span><span class="hljs-variable">TK</span>。<br><br>身高满足<span class="hljs-variable">T1</span><span class="hljs-operator">&lt;</span>…<span class="hljs-operator">&lt;</span><span class="hljs-variable">Ti</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">Ti</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>…<span class="hljs-operator">&gt;</span><span class="hljs-variable">TK</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span>≤<span class="hljs-variable">i</span>≤<span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span>。<br><br>你的任务是，已知所有<span class="hljs-built_in">N</span>位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。<br></code></pre></td></tr></table></figure><p>本题就是求最长递增序列和反向最长递增序列,然后计算出两个队列长度总和最长的情况</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> dp1[<span class="hljs-number">100</span>],dp2[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> h[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;h[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        dp1[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(h[j]&lt;h[i])<br>                dp1[i] = <span class="hljs-built_in">max</span>(dp1[i],dp1[j]+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        dp2[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= i; j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(h[j]&lt;h[i])<br>                dp2[i] = <span class="hljs-built_in">max</span>(dp2[i],dp2[j]+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> maxcnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        maxcnt=<span class="hljs-built_in">max</span>(maxcnt,dp1[i]+dp2[i]);<br>    cout&lt;&lt;n-maxcnt+<span class="hljs-number">1</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0012-低价购买"><a href="#P0012-低价购买" class="headerlink" title="P0012 低价购买"></a>P0012 低价购买</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns">“低价购买”这条建议是在奶牛股票市场取得成功的一半规则。要想被认为是伟大的投资者，你必须遵循以下的问题建议:“低价购买；再低价购买”。每次你购买一支股票,你必须用低于你上次购买它的价格购买它。买的次数越多越好!你的目标是在遵循以上建议的前提下，求你最多能购买股票的次数。你将被给出一段时间内一支股票每天的出售价(≤<span class="hljs-number">2</span>^<span class="hljs-number">16</span>范围内的正整数)，你可以选择在哪些天购买这支股票。每次购买都必须遵循“低价购买；再低价购买”的原则。写一个程序计算最大购买次数。<br><br>这里是某支股票的价格清单：<br><br>日期<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5,6,7,8</span>,<span class="hljs-number">9,10,11,12</span><br><br>价格<span class="hljs-number">68,69,54,64</span>,<span class="hljs-number">68,64,70,67</span>,<span class="hljs-number">78,62,98,87</span><br><br>最优秀的投资者可以购买最多<span class="hljs-number">4</span>次股票，可行方案中的一种是：<br><br>日期<span class="hljs-number">2,5,6,10</span><br><br>价格<span class="hljs-number">69,68,64,62</span><br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/solution/P1108">解析</a></p><p>第一个输出是求最长下降子序列长度</p><p>第二个问题求<strong>不同的</strong>最长下降子序列的个数。</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> f[<span class="hljs-number">6000</span>];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> c[<span class="hljs-number">6000</span>];<br><span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[<span class="hljs-number">6000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> max1=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>          <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++) <span class="hljs-keyword">if</span>(a[i]&lt;a[j] &amp;&amp; f[i]&lt;f[j]+<span class="hljs-number">1</span>)f[i]=f[j];<br>        f[j]++;<br>          <span class="hljs-keyword">if</span>(f[j]==<span class="hljs-number">1</span>)c[j]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;a[j] &amp;&amp; f[i]==f[j]+<span class="hljs-number">1</span>)&#123;<br>                c[i]+=c[j];    <br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==a[j] &amp;&amp; f[i]==f[j]) c[j]=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f[i]&gt;max1)max1=f[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(f[i]==max1)cnt+=c[i];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,max1,cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0015-硬币组合问题"><a href="#P0015-硬币组合问题" class="headerlink" title="P0015 硬币组合问题"></a>P0015 硬币组合问题</h4><p>题意:</p><p>小A有n枚硬币，现在要买一样不超过m元的商品，他不想得到找钱（多脏啊），同时又不想带太多的硬币，且硬币可以重复，现在已知这n枚硬币的价值，请问最少需要多少硬币就能组合成所有可能的价格？</p><p><a href="https://www.luogu.com.cn/problem/solution/P2001">解析</a></p><p>这题刚开始以为是给定一个很大的值M来用最少的硬币凑出来,心里想怎么这么简单…</p><p>结果原来是用最少的硬币数,能达到凑出1~M每个数…</p><p>也是用动态规划写,但是是没有思路的,看了题解才懂</p><p>如果当前已经用ans个硬币凑出了1 ~ now的数,然后考虑加入coin[i],(这里的coin数组已经升序排列了);这时要想覆盖1 ~ now+a[i]的数,就要满足a[i] &lt;&#x3D; now + 1(具体看题解);</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n,m,a[N];<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span> c;c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(c&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c&gt;<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span>&#123;<br>sum=sum*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>;<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>n=<span class="hljs-built_in">read</span>();<br>m=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>a[i]=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]!=<span class="hljs-number">1</span>)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;No answer!!!&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> p=<span class="hljs-number">1</span>,now=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> div=<span class="hljs-number">1</span>;div;div++)&#123;<br><span class="hljs-keyword">if</span>(a[div] &gt; now+<span class="hljs-number">1</span> || div&gt;n)&#123; <br>div--;<br><span class="hljs-keyword">if</span>(now&gt;=m)&#123; <br>cout&lt;&lt;p;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(div == n)&#123;<br>p+=(m-now)/a[div];<br><span class="hljs-keyword">if</span>((m-now)%a[div])p++;<br>cout&lt;&lt;p;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(a[div+<span class="hljs-number">1</span>] &gt; now+<span class="hljs-number">1</span> &amp;&amp; now&lt;m)&#123;<br>now+=a[div];<br>p++;<br>&#125; <br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>快读:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-type">char</span> x=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(x&lt;<span class="hljs-number">48</span>||x&gt;<span class="hljs-number">57</span>) x=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x&gt;=<span class="hljs-number">48</span>&amp;&amp;x&lt;=<span class="hljs-number">57</span>)<br>&#123;ans=(ans&lt;&lt;<span class="hljs-number">1</span>)+(ans&lt;&lt;<span class="hljs-number">3</span>)+(x^<span class="hljs-number">48</span>);<br>x=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0020-多重背包问题"><a href="#P0020-多重背包问题" class="headerlink" title="P0020 多重背包问题"></a>P0020 多重背包问题</h4><p>题目描述</p><p>终于，破解了千年的难题。小 FF 找到了王室的宝物室，里面堆满了无数价值连城的宝物。</p><p>这下小 FF 可发财了，嘎嘎。但是这里的宝物实在是太多了，小 FF 的采集车似乎装不下那么多宝物。看来小 FF 只能含泪舍弃其中的一部分宝物了。</p><p>小 FF 对洞穴里的宝物进行了整理，他发现每样宝物都有一件或者多件。他粗略估算了下每样宝物的价值，之后开始了宝物筛选工作：小 FF 有一个最大载重为 �<em>W</em> 的采集车，洞穴里总共有 �<em>n</em> 种宝物，每种宝物的价值为 ��<em>v**i</em>，重量为 ��<em>w**i</em>，每种宝物有 ��<em>m**i</em> 件。小 FF 希望在采集车不超载的前提下，选择一些宝物装进采集车，使得它们的价值和最大。</p><p><a href="https://www.luogu.com.cn/problem/P1776">原题</a></p><p>这就是个<a href="https://oi-wiki.org/dp/knapsack/#%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85">多重背包问题</a>,优化使用二进制分组优化成0-1背包问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> v[<span class="hljs-number">1000010</span>],w[<span class="hljs-number">1000010</span>],dp[<span class="hljs-number">1000010</span>];<br><span class="hljs-type">int</span> cnt;<span class="hljs-comment">//这是记录新产生的物品的数目</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,W;<br>    cin&gt;&gt;n&gt;&gt;W;<br>    <span class="hljs-type">int</span> vi, wi, mi;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;vi&gt;&gt;wi&gt;&gt;mi;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=mi;k&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>            v[++cnt] = vi * k;<br>            w[cnt] = wi * k;<br>            mi -= k;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(mi&gt;<span class="hljs-number">0</span>)&#123;<br>            v[++cnt] = vi * mi;<br>            w[cnt] = wi * mi;<br>        &#125;<span class="hljs-comment">//不是2的整数次幂,剩余的部分也能组成一个大物件</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//转化为0-1背包A</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=W;j&gt;=w[i];j--)&#123;<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j],dp[j - w[i]]+v[i]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[W]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>0-1背包的核心代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = W; l &gt;= w[i]; l--) f[l] = <span class="hljs-built_in">max</span>(f[l], f[l - w[i]] + v[i]);<br></code></pre></td></tr></table></figure><p>完全背包问题核心代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt;= W - w[i]; l++)<br>    f[l + w[i]] = <span class="hljs-built_in">max</span>(f[l] + v[i], f[l + w[i]]);<br><span class="hljs-comment">// 由 f[i][l + w[i]] = max(max(f[i - 1][l + w[i]], f[i - 1][l] + w[i]),</span><br><span class="hljs-comment">// f[i][l + w[i]]); 简化而来</span><br></code></pre></td></tr></table></figure><h4 id="P0023-石子合并问题"><a href="#P0023-石子合并问题" class="headerlink" title="P0023 石子合并问题"></a>P0023 石子合并问题</h4><p>题目:在一个园形操场的四周摆放N堆石子,现要将石子有次序地合并成一堆.规定每次只能选相邻的2堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。</p><p>试设计出一个算法,计算出将N堆石子合并成1堆最大得分.</p><p>这题是环形摆放石子,可以先看排成一排的石子合并问题,利用区间DP来写</p><ul><li><p>状态: f[L,R] 表示从L到R的石子合并成一堆的最小代价</p><p>  先将区间分割成两个部分,分割点是k这样就可以考虑f[L,k]和f[k+1,R]和f[L,R]的关系,然后每堆石子的得分,我们用前缀和来计算,可以简便计算.</p><p>  前缀和s[R]是R之前所有元素的总和</p><p>  这里求最大值,f[L,R] &#x3D; max(f[L,k]+f[k+1,R]) + s[R] - s[L-1]</p></li><li><p>初值是:f[i,i] &#x3D; 0</p></li><li><p>目标是f[1,n]</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//链式石子合并模板</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<span class="hljs-comment">//阶段:枚举区间的长度</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>;l+len<span class="hljs-number">-1</span>&lt;=n;l++)&#123;<span class="hljs-comment">//状态:枚举区间的起点</span><br>        <span class="hljs-type">int</span> r=l+len<span class="hljs-number">-1</span>;<span class="hljs-comment">//区间的终点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l;k&lt;r;k++)<span class="hljs-comment">//分割点</span><br>            f[l][r] = <span class="hljs-built_in">max</span>(f[l][r], f[l][k] + f[k+<span class="hljs-number">1</span>][r] + s[r] - s[l<span class="hljs-number">-1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>环形的情况可以考虑转化成链型,复制一遍数组转化成长度为2N的链型数组来写,所求的就是max&#x2F;min(f[1,n],f[2,n+1],f[3,n+2],…,f[n+1,2*n])</p><p>时间复杂度是O(n^3^)</p><p><img src="/2023/11/08/algorithm/image-20231203145212822.png" alt="image-20231203145212822"></p><p>上代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">4010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> s[N];<span class="hljs-comment">//前缀和</span><br><span class="hljs-type">int</span> f[N][N];<span class="hljs-comment">//最小值</span><br><span class="hljs-type">int</span> g[N][N];<span class="hljs-comment">//最大</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f,INF,<span class="hljs-built_in">sizeof</span>(f));<br>    <span class="hljs-built_in">memset</span>(g,-INF,<span class="hljs-built_in">sizeof</span>(f));<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        a[i+n] = a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)&#123;<br>        s[i] = s[i<span class="hljs-number">-1</span>] + a[i];<br>        f[i][i] = <span class="hljs-number">0</span>;<br>        g[i][i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>;l+len<span class="hljs-number">-1</span>&lt;=<span class="hljs-number">2</span>*n;l++)&#123;<br>            <span class="hljs-type">int</span> r = l+len<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l;k&lt;r;k++)&#123;<br>                f[l][r] = <span class="hljs-built_in">min</span>(f[l][r],f[l][k]+f[k+<span class="hljs-number">1</span>][r]+s[r]-s[l<span class="hljs-number">-1</span>]);<br>                g[l][r] = <span class="hljs-built_in">max</span>(g[l][r],g[l][k]+g[k+<span class="hljs-number">1</span>][r]+s[r]-s[l<span class="hljs-number">-1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> minv = INF,maxv = -INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)&#123;<br>        minv = <span class="hljs-built_in">min</span>(minv,f[i][i+n<span class="hljs-number">-1</span>]);<br>        maxv = <span class="hljs-built_in">max</span>(maxv,g[i][i+n<span class="hljs-number">-1</span>]);<br>    &#125;<br>    cout&lt;&lt;maxv&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">5010</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> dp[maxn][maxn];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum[<span class="hljs-number">2</span> * maxn] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> N, w[maxn * <span class="hljs-number">2</span>];<br>    std::cin &gt;&gt; N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N;i++)&#123;<br>        std::cin &gt;&gt; w[i];<br>        w[i + N] = w[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * N;i++)<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + w[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i;i--)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= N * <span class="hljs-number">2</span>;j++)&#123;<br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j - <span class="hljs-number">1</span>], dp[i + <span class="hljs-number">1</span>][j]) + sum[j] - sum[i - <span class="hljs-number">1</span>];<br>        &#125;;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i][i + N - <span class="hljs-number">1</span>]);<br><br>    std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最大值具有性质:可以从两个端点的最大值取得</p><p><img src="/2023/11/08/algorithm/image-20231203171324481.png" alt="image-20231203171324481"></p><h5 id="四边形不等式优化DP-决策单调性"><a href="#四边形不等式优化DP-决策单调性" class="headerlink" title="四边形不等式优化DP;决策单调性"></a>四边形不等式优化DP;决策单调性</h5><p>这题的求最小合并值min可以使用四边形不等式优化</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">转移方程:<br>f<span class="hljs-comment">[i,j]</span> = min(f<span class="hljs-comment">[i,k]</span>,f<span class="hljs-comment">[k+1,j]</span>) + w<span class="hljs-comment">[i,j]</span>;i&lt;=k&lt;=j-1<br>其中,f<span class="hljs-comment">[i,i]</span> = w<span class="hljs-comment">[i,i]</span> = 0<br></code></pre></td></tr></table></figure><p>代码见<a href="https://www.bilibili.com/video/BV1pm4y1t7ij/?spm_id_from=333.788.recommend_more_video.1&vd_source=3f137d88bc692ff15cffaebe2e7998fc">视频</a></p><p><img src="/2023/11/08/algorithm/image-20231204003434196.png" alt="image-20231204003434196"></p><p><a href="https://oi-wiki.org/dp/opt/quadrangle/">oi wiki</a></p><h4 id="P0026-偷天换日-树形DP"><a href="#P0026-偷天换日-树形DP" class="headerlink" title="P0026 偷天换日(树形DP)"></a>P0026 偷天换日(树形DP)</h4><p>神偷对艺术馆内的名画垂涎欲滴准备大捞一把。艺术馆由若干个展览厅和若干条走廊组成。每一条走廊的尽头不是通向一个展览厅，就是分为两个走廊。每个展览厅内都有若干幅画，每副画都有一个价值。经过走廊和偷画都是要耗费时间的。警察会在第n秒到达进口，在不被逮捕的情况下你最多能得到的价值。</p><p>第一行一个整数 n</p><p>第二行若干组整数，对于每组整数（t,x），t表示进入这个展览厅或经过走廊要耗费t秒的时间，若x&gt;0表示走廊通向的展览厅内有x幅画,接下来x对整数(w,c)表示偷一幅价值为w的画需要c秒的时间。若x&#x3D;0表示走廊一分为二。</p><p>输入是按深度优先给出的。</p><p><img src="/2023/11/08/algorithm/image-20231206230602193.png" alt="image-20231206230602193"></p><p>直接就是不会写…先小看一手<a href="https://oi-wiki.org/dp/tree/">树形DP</a></p><p>上代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls p&lt;&lt;1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs p&lt;&lt;1|1</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-type">bool</span> f=<span class="hljs-number">1</span>;<span class="hljs-type">char</span> ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>)f=<span class="hljs-number">0</span>;ch=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))&#123;k=(k&lt;&lt;<span class="hljs-number">1</span>)+(k&lt;&lt;<span class="hljs-number">3</span>)+(ch^<span class="hljs-number">48</span>);ch=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">return</span> f?k:-k;<br>&#125;<br><span class="hljs-type">int</span> m,f[<span class="hljs-number">1000</span>][<span class="hljs-number">600</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<span class="hljs-comment">//读入部分</span><br><span class="hljs-type">int</span> t=<span class="hljs-built_in">read</span>(),n=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span>(!n)&#123;<br><span class="hljs-built_in">dfs</span>(ls);<br><span class="hljs-built_in">dfs</span>(rs);<span class="hljs-comment">//①</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=m-t*<span class="hljs-number">2</span>;v&gt;<span class="hljs-number">0</span>;v--)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v;j&gt;=<span class="hljs-number">0</span>;j--)<br>    f[p][v+t*<span class="hljs-number">2</span>]=<span class="hljs-built_in">max</span>(f[p][v+t*<span class="hljs-number">2</span>],f[ls][j]+f[rs][v-j]);<span class="hljs-comment">//②千万不要忘了给走廊时间乘二</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>    <span class="hljs-type">int</span> w=<span class="hljs-built_in">read</span>(),c=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=m;v&gt;=c+t*<span class="hljs-number">2</span>;v--)<br>        f[p][v]=<span class="hljs-built_in">max</span>(f[p][v],f[p][v-c]+w);<span class="hljs-comment">//③</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>m=<span class="hljs-built_in">read</span>()<span class="hljs-number">-1</span>; <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[<span class="hljs-number">1</span>][m]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于数据是深度优先给出,也就是说可以使用递归来读取,并且构造一棵树,在递归的时候直接进行DP</p><p><strong>dp[i] [j] 代表了,第i个根节点,逃跑时间为j时,能够偷到的最大价值</strong></p><ul><li>读取部分,如果读到0的话,说明遇到分叉走廊,就先对左子树再调用dfs(),再对右子树调用dfs()</li><li>如果不是0,就处理0-1背包问题,对接下来的物品进行筛选.<ul><li>注意,这里由于要能给逃出出口足够时间,需要v&gt;&#x3D;c+t*2,也就是一个走廊的来回时间</li><li>转移方程这里,就是正常的0-1背包,注意是f[p] [v-c]而不是f[p] [v-c-t*2] ; tx2应该在外面,算作限制条件,里面的n个物品所需的时间单独算</li></ul></li><li>左右子树调用完之后处理本身根节点的情况,最大的剩余时间是m - t*2 ,v最大从这个值开始递减,但是要大于0,这样才满足能逃走,这样之后就变成了时间v怎么分给这两边最好的问题了.</li></ul><p>希望一段时间后再来看还能看懂,懂得更多</p><h5 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-type">bool</span> f=<span class="hljs-number">1</span>;<span class="hljs-type">char</span> ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>)f=<span class="hljs-number">0</span>;ch=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))&#123;k=(k&lt;&lt;<span class="hljs-number">1</span>)+(k&lt;&lt;<span class="hljs-number">3</span>)+(ch^<span class="hljs-number">48</span>);ch=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">return</span> f?k:-k;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FPGA</title>
    <link href="/2023/05/21/FPGA/"/>
    <url>/2023/05/21/FPGA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>photo</title>
    <link href="/2023/04/10/photo/"/>
    <url>/2023/04/10/photo/</url>
    
    <content type="html"><![CDATA[<p>  <img src="/2023/04/10/photo/wallhaven-mpl1ek.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>wallpaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
