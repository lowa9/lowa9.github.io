<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vim使用技巧</title>
    <link href="/2023/11/09/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/11/09/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="vim使用记录"><a href="#vim使用记录" class="headerlink" title="vim使用记录"></a>vim使用记录</h1><h2 id="1-基础模式"><a href="#1-基础模式" class="headerlink" title="1.基础模式"></a>1.基础模式</h2><ul><li>normal模式:idle状态</li><li>insert模式:<ul><li><strong>i</strong>   光标前</li><li><strong>a</strong>       光标后</li></ul></li><li>replace模式:R</li><li>选取模式<ul><li>visual:<strong>v</strong></li><li>visual-line:<strong>shift-v</strong></li><li>visual-block:<strong>CTRL-v</strong></li></ul></li><li>command-line:<strong>:</strong></li></ul><h2 id="2-指令拾遗"><a href="#2-指令拾遗" class="headerlink" title="2.指令拾遗"></a>2.指令拾遗</h2><ul><li><p>多个窗口查看一片或者多片buffer:</p><ul><li><strong>:sp</strong>:创建另一个窗口查看当前的文件</li><li><strong>tabnew</strong>:</li><li><strong>gt:shift between those tabs</strong></li></ul></li><li><p>normal模式查找某个word:</p><ul><li><strong>&#x2F;main</strong> means find the ‘main’,enter to get there,and ‘n’ for the next ‘main’</li></ul></li><li><p>normal模式下移动指令</p><ul><li>hjkl左下上右</li><li>w一个词一个词向后,b一个词一个词向前,e跳到光标所在词词尾</li><li><strong>0</strong>移动到句首,**$**移动到句尾,<strong>^</strong>移动到本行行首第一个非空白字符</li><li>ctrl+u &#x3D;&#x3D; pgup ,ctrl+d &#x3D;&#x3D; pgdn</li><li>‘H’光标移动到屏幕最顶端,’M’屏幕中间,’L’屏幕底端</li><li>gg文件开头,G文件末尾</li><li>line_number:<strong>:{number}<CR></CR></strong> or  <strong>{number}G</strong></li><li>find:fo查找本行光标后第一个o,Fo查找本行光标前第一个o</li><li>To:tr前往本行光标后第一个r前,Tr前往本行光标前第一个r后</li></ul></li><li><p>normal模式下编辑指令</p><ul><li>o:open a new line and get into insert mode</li><li>d:delete:<ul><li><strong>dw</strong>:delete a word</li><li><strong>de</strong>:delete til the end of this word.<strong>db</strong>:delete back to the begining of this word</li><li><strong>ce</strong>:delete the word and get into the insert mode</li><li><strong>dd</strong>:delete the whole line</li><li><strong>cc</strong>:delete the whole line and insert</li></ul></li><li>x:just <strong>delete</strong> the char that you are working on</li><li>r:take another argument and replace the char you’re working on</li><li>u:undo:equals to ctrl+z</li><li>ctrl+r:reverse the undo</li><li>y,p:yank and paste<ul><li><strong>yw</strong>:yank a word</li><li><strong>yy</strong>:yank the whole line</li><li><strong>yb</strong>:复制光标前单词.<strong>ye</strong>:复制光标后单词</li><li><strong>p</strong>:paste</li></ul></li></ul></li><li><p>visual模式</p><ul><li>进入visual 模式后,hjkl以及其他的移动指令都会选取从光标开始的所有文本</li><li>进入visual block模式,移动指令可以选取文本块</li><li>visual line模式:选取文本行</li></ul></li><li><p>重复性工作</p><p>使用    ‘.’     <strong>可以在新的光标处重复你 的上一个编辑工作</strong></p></li></ul><h3 id="计数指令执行"><a href="#计数指令执行" class="headerlink" title="计数指令执行"></a>计数指令执行</h3><p>举例:移动四行:normal模式下:4j(下移4行)</p><p>向后移动4个word:4w</p><p>等等</p><h3 id="修饰符a-i"><a href="#修饰符a-i" class="headerlink" title="修饰符a,i"></a>修饰符a,i</h3><p>a for  around(including) and i for inside</p><p>for example:</p><p><strong>di(</strong> means delete things inside the “()”</p><p><strong>ci[</strong> means change things inside the”[]”</p><p><strong>da(</strong> means delete things inside the “()”  including “()”</p><p><strong>ci”</strong> means change things inside the “”</p><p><em>后续待补充</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>The missing semester</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cargo</title>
    <link href="/2023/11/08/cargo/"/>
    <url>/2023/11/08/cargo/</url>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//参加rustsbi学到的</span><br><br>cargo fmt  <span class="hljs-comment">//调整代码风格</span><br><br>cargo build --target=... <span class="hljs-comment">//交叉编译,可以在target指定的环境里编译</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/11/08/algorithm/"/>
    <url>/2023/11/08/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="DP问题"><a href="#DP问题" class="headerlink" title="DP问题"></a>DP问题</h1><h4 id="P0005折线分割平面问题"><a href="#P0005折线分割平面问题" class="headerlink" title="P0005折线分割平面问题"></a>P0005折线分割平面问题</h4><p>题目:</p><p><img src="/2023/11/08/algorithm/image-20231108174122624.png" alt="image-20231108174122624"></p><p>明确几点:</p><ul><li>增加第n条折线,要想让分割平面尽可能多,折线的两个射线边必须要和之前 n-1 条折线都相交,在这两条射线上各自形成2(n-1)个交点.也就是各自形成了2(n-1)条线段和两条被截短的射线</li><li>每形成一个线段,就会增加一个平面,每增加一个射线就会增加一个平面</li><li>最重要的是别忘了折线的角所在点所衍生了两个线段,但是<em>就增加一个平面</em></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">递推关系:<br><span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(n)</span></span> = <span class="hljs-built_in">f</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-number">4</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lishuhuakai/article/details/8518245">具体解析</a></p><h4 id="P0006健身房卡路里问题"><a href="#P0006健身房卡路里问题" class="headerlink" title="P0006健身房卡路里问题"></a>P0006健身房卡路里问题</h4><p>题目:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">夏天要到了，小西和小瓜决定去健身。健身房是一个n行m列的矩阵。a[i][j]代表在第i行第j列，可以消耗的卡路里。<br><br>小西从第1行第1列出发，要到(n,m);小西可以从a[i][j]，走到a[i+1][j],或者a[i][j+1];<br><br>小瓜从(n,1)出发，要到(1,m);小瓜可以从a[i][j]出发，走到a[i-1][j],或者a[i][j+1];<br><br>由于小西和小瓜要聚在一起发张自拍，他们必须在健身房的某一行，某一列相遇（仅相遇一次）。由于他们没有好好健身，所以在自拍地点的卡路里消耗不计入总卡路里消耗值。你的任务是求出小西和小瓜可以消耗的最大总卡路里值。<br><br>输入描述<br>第一行包含两个整数，n,m(3&lt;=n,m&lt;=1000)，代表健身房的行、列数，接下来的i行j列代表a[i][j]（(0&lt;=a[i][j]&lt;=10<span class="hljs-built_in">^</span>5），即在第i行，j列可以燃烧的卡路里。<br><br>输出描述<br>输出一个整数：即他们可能消耗的总卡路里的总和的最大值。<br></code></pre></td></tr></table></figure><p><img src="/2023/11/08/algorithm/image-20231109010759333.png" alt="image-20231109010759333"></p><p>题解:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">显然，设两人在<span class="hljs-built_in">O</span>点相遇，<span class="hljs-variable">lahub</span>只能从<span class="hljs-number">1</span>或者<span class="hljs-number">2</span>走到<span class="hljs-built_in">O</span>，如果他从<span class="hljs-number">1</span>走到<span class="hljs-built_in">O</span>，那他的路线就是<span class="hljs-number">1</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">3</span>，则<span class="hljs-variable">Iahubina</span>就是<span class="hljs-number">4</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">2</span>，同理可知，若<span class="hljs-variable">lahub</span>是从<span class="hljs-number">2</span>走到<span class="hljs-built_in">O</span>，他的路线一定是<span class="hljs-number">2</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">4</span><span class="hljs-operator">,</span><span class="hljs-variable">Iahubina</span>就是<span class="hljs-number">1</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">3</span>。<br><br>所以，易得出最终解为<span class="hljs-variable">max</span>（<span class="hljs-variable">A</span>到<span class="hljs-number">1</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">3</span>到<span class="hljs-built_in">C</span>最大值<span class="hljs-operator">+</span><span class="hljs-built_in">D</span>到<span class="hljs-number">4</span>最大 值<span class="hljs-operator">+</span><span class="hljs-number">2</span>到<span class="hljs-variable">B</span>的最大值，<span class="hljs-variable">A</span>到<span class="hljs-number">2</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">4</span>到<span class="hljs-built_in">C</span>最大 值<span class="hljs-operator">+</span><span class="hljs-built_in">D</span>到<span class="hljs-number">1</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">3</span>到<span class="hljs-variable">B</span>最大值）。<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/solution/CF429B">题目详解</a></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp1[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp2[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp3[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp4[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<span class="hljs-comment">//用四个dp数组存放最大值</span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;a[i][j]);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">memset</span>(dp1,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp1));<br><span class="hljs-built_in">memset</span>(dp2,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp2));<br><span class="hljs-built_in">memset</span>(dp3,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp3));<br><span class="hljs-built_in">memset</span>(dp4,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp4));<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        dp1[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp1[i<span class="hljs-number">-1</span>][j],dp1[i][j<span class="hljs-number">-1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>        dp2[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp2[i+<span class="hljs-number">1</span>][j],dp2[i][j+<span class="hljs-number">1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        dp3[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp3[i+<span class="hljs-number">1</span>][j],dp3[i][j<span class="hljs-number">-1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>        dp4[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp4[i<span class="hljs-number">-1</span>][j],dp4[i][j+<span class="hljs-number">1</span>]);&#125;&#125;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;m;j++)<br>        &#123;<br>        x=<span class="hljs-built_in">max</span>(x,dp1[i][j<span class="hljs-number">-1</span>]+dp2[i][j+<span class="hljs-number">1</span>]+dp3[i+<span class="hljs-number">1</span>][j]+dp4[i<span class="hljs-number">-1</span>][j]);<br>        x=<span class="hljs-built_in">max</span>(x,dp1[i<span class="hljs-number">-1</span>][j]+dp2[i+<span class="hljs-number">1</span>][j]+dp3[i][j<span class="hljs-number">-1</span>]+dp4[i][j+<span class="hljs-number">1</span>]);&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0007-Toss-the-coin"><a href="#P0007-Toss-the-coin" class="headerlink" title="P0007 Toss the coin"></a>P0007 Toss the coin</h4><p>题目:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Toss is <span class="hljs-keyword">an</span> important part <span class="hljs-keyword">of</span> <span class="hljs-keyword">any</span> event. When everything becomes equal toss is <span class="hljs-keyword">the</span> ultimate decider. Normally <span class="hljs-keyword">a</span> fair coin is used <span class="hljs-keyword">for</span> Toss. A coin has <span class="hljs-literal">two</span> sides head(H) <span class="hljs-keyword">and</span> tail(T). Superstition may work <span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">of</span> choosing head <span class="hljs-keyword">or</span> tail. If anyone becomes winner choosing head he always wants <span class="hljs-built_in">to</span> choose head. Nobody believes that his winning chance is <span class="hljs-number">50</span><span class="hljs-number">-50.</span> However <span class="hljs-keyword">in</span> this problem we will deal <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> fair coin <span class="hljs-keyword">and</span> n times tossing <span class="hljs-keyword">of</span> such <span class="hljs-keyword">a</span> coin. The <span class="hljs-built_in">result</span> <span class="hljs-keyword">of</span> such <span class="hljs-keyword">a</span> tossing can be represented <span class="hljs-keyword">by</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">string</span>. Such <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> <span class="hljs-number">3</span> times tossing is used <span class="hljs-keyword">then</span> there are possible <span class="hljs-number">8</span> outcomes.<br><br>HHH HHT HTH HTT THH THT TTH TTT<br><br>As <span class="hljs-keyword">the</span> coin is fair we can consider that <span class="hljs-keyword">the</span> probability <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> outcome is also equal. For simplicity we can consider that <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> same thing is repeated <span class="hljs-number">8</span> times we can expect <span class="hljs-built_in">to</span> <span class="hljs-built_in">get</span> <span class="hljs-keyword">each</span> possible sequence once.The Problem<br><br>In <span class="hljs-keyword">the</span> above example we see <span class="hljs-number">1</span> sequnce has <span class="hljs-number">3</span> consecutive H, <span class="hljs-number">3</span> sequence has <span class="hljs-number">2</span> consecutive H <span class="hljs-keyword">and</span> <span class="hljs-number">7</span> sequence has <span class="hljs-keyword">at</span> least single H. You have <span class="hljs-built_in">to</span> generalize <span class="hljs-keyword">it</span>. Suppose <span class="hljs-keyword">a</span> coin is tossed n times. And <span class="hljs-keyword">the</span> same <span class="hljs-built_in">process</span> is repeated <span class="hljs-number">2</span>^n times. How many sequence you will <span class="hljs-built_in">get</span> which <span class="hljs-keyword">contains</span> <span class="hljs-keyword">a</span> consequnce <span class="hljs-keyword">of</span> H <span class="hljs-keyword">of</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">at</span> least k.<br><br>有n张牌，求出至少有k张牌连续是正面的排列的种数。（<span class="hljs-number">1</span>=&lt;k&lt;=n&lt;=<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>解法还是分治,这里参考较为简单的题目:k为3的情况下该怎么思考:<a href="https://blog.csdn.net/It_BeeCoder/article/details/52863471?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-52863471-blog-50978504.235%5Ev38%5Epc_relevant_sort_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-52863471-blog-50978504.235%5Ev38%5Epc_relevant_sort_base3&utm_relevant_index=2">危险的组合</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. n个盒子排成一行，如果把第一个盒子拿掉，剩下的n-<span class="hljs-number">1</span>个盒子里面满足条件，有cnt(n-<span class="hljs-number">1</span>)种，第一个盒子有<span class="hljs-number">2</span>种情况：放铀或者铅，因此这种情况共有 <span class="hljs-number">2</span>*cnt(n-<span class="hljs-number">1</span>) 种。<br><br><span class="hljs-attribute">2</span>. n个盒子排成一行，如果把第一个盒子拿掉，剩下的n-<span class="hljs-number">1</span>个盒子不满足条件，那么只有当前三个盒子是铀，第四个盒子是铅才可以。（注：第四个盒子如果是铀，那么<span class="hljs-number">234</span>盒子就满足条件了）。pow(<span class="hljs-number">2</span>, n-<span class="hljs-number">4</span>)是n-<span class="hljs-number">4</span>盒子的所有情况，减去cnt(n-<span class="hljs-number">4</span>)后n-<span class="hljs-number">4</span>盒子满足条件的（因为本部分讨论的是“如果把第一个盒子拿掉，剩下的n-<span class="hljs-number">1</span>个盒子不满足条件”）。<br><span class="hljs-attribute">cnt</span>(n)=<span class="hljs-number">2</span>*cnt(n-<span class="hljs-number">1</span>) +pow(<span class="hljs-number">2</span>,n-<span class="hljs-number">4</span>)-cnt(n-<span class="hljs-number">4</span>)；接下来编写程序就可以了。<br></code></pre></td></tr></table></figure><p>以此,将k作为变量加入思考还是可以想出来的.问题在于这题数值特别的大,需要自己写大数来解决,这里参考网上一篇<a href="https://blog.csdn.net/tengfei461807914/article/details/72560683">解答</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">200</span>;<span class="hljs-comment">/*精度位数*/</span><br><span class="hljs-comment">/*(必选)类与基础功能定义，用法类似于unsigned(非负)*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bign</span><br>&#123;<br>    <span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp;,bign&amp;);<span class="hljs-comment">/*输入运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*输出运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*加号运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*乘号运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">int</span>);<span class="hljs-comment">/*高精度乘以低精度乘法友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*减号运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*除法运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> bign <span class="hljs-keyword">operator</span>%(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*模运算符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-built_in">operator</span>&lt;(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑小于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑大于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑小于等于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑大于等于符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑等符友元*/</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> bign&amp;,<span class="hljs-type">const</span> bign&amp;);<span class="hljs-comment">/*逻辑不等符友元*/</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> len,s[maxn];<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">bign</span>()&#123;<span class="hljs-built_in">memset</span>(s,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(s));len=<span class="hljs-number">1</span>;&#125;<br>    bign <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* num)<br>    &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,ol;<br>        ol=len=<span class="hljs-built_in">strlen</span>(num);<br>        <span class="hljs-keyword">while</span>(num[i++]==<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;len&gt;<span class="hljs-number">1</span>)<br>        len--;<br>        <span class="hljs-built_in">memset</span>(s,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(s));<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>        s[i]=num[ol-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    bign <span class="hljs-keyword">operator</span>=(<span class="hljs-type">int</span> num)<br>    &#123;<br>        <span class="hljs-type">char</span> s[maxn];<br>        <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%d&quot;</span>,num);<br>        *<span class="hljs-keyword">this</span>=s;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-built_in">bign</span>(<span class="hljs-type">int</span> num)&#123;*<span class="hljs-keyword">this</span>=num;&#125;<br>    <span class="hljs-built_in">bign</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* num)&#123;*<span class="hljs-keyword">this</span>=num;&#125;<br>    <span class="hljs-function">string <span class="hljs-title">str</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> i;<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)res=<span class="hljs-built_in">char</span>(s[i]+<span class="hljs-string">&#x27;0&#x27;</span>)+res;<br>        <span class="hljs-keyword">if</span>(res==<span class="hljs-string">&quot;&quot;</span>)res=<span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*(可选)基本逻辑运算符重载*/</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span>(a.len!=b.len)<span class="hljs-keyword">return</span> a.len&lt;b.len;<br>    <span class="hljs-keyword">for</span>(i=a.len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        <span class="hljs-keyword">if</span>(a.s[i]!=b.s[i])<br>    <span class="hljs-keyword">return</span> a.s[i]&lt;b.s[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> b&lt;a;&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> !(a&gt;b);&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> !(a&lt;b);&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> a&lt;b||a&gt;b;&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)&#123;<span class="hljs-keyword">return</span> !(a&lt;b||a&gt;b);&#125;<br><span class="hljs-comment">/*(可选)加法运算符重载*/</span><br>bign <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,max=(a.len&gt;b.len?a.len:b.len),t,c;<br>    bign sum;<br>    sum.len=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,c=<span class="hljs-number">0</span>;c||i&lt;max;i++)<br>    &#123;<br>        t=c;<br>        <span class="hljs-keyword">if</span>(i&lt;a.len)t+=a.s[i];<br>        <span class="hljs-keyword">if</span>(i&lt;b.len)t+=b.s[i];<br>        sum.s[sum.len++]=t%<span class="hljs-number">10</span>;<br>        c=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">/*(可选)乘法运算符重载(高精度乘高精度)*/</span><br>bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    bign res;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a.len;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;b.len;j++)<br>        &#123;<br>            res.s[i+j]+=(a.s[i]*b.s[j]);<br>            res.s[i+j+<span class="hljs-number">1</span>]+=res.s[i+j]/<span class="hljs-number">10</span>;<br>            res.s[i+j]%=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    res.len=a.len+b.len;<br>    <span class="hljs-keyword">while</span>(res.s[res.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;res.len&gt;<span class="hljs-number">1</span>)res.len--;<br>    <span class="hljs-keyword">if</span>(res.s[res.len])res.len++;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*高精度乘以低精度(注意:必须是bign*int顺序不能颠倒,要么会与高精度乘高精度发生冲突*/</span><br>bign <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">int</span> b)<br>&#123;<br>    <span class="hljs-type">int</span> i,t,c=<span class="hljs-number">0</span>;<br>    bign res;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a.len;i++)<br>    &#123;<br>        t=a.s[i]*b+c;<br>        res.s[i]=t%<span class="hljs-number">10</span>;<br>        c=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    res.len=a.len;<br>    <span class="hljs-keyword">while</span>(c!=<span class="hljs-number">0</span>)<br>    &#123;<br>        res.s[i++]=c%<span class="hljs-number">10</span>;<br>        c/=<span class="hljs-number">10</span>;<br>        res.len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*(可选)减法运算符重载*/</span><br>bign <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    bign res;<br>    <span class="hljs-type">int</span> i,len=(a.len&gt;b.len)?a.len:b.len;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        res.s[i]+=a.s[i]-b.s[i];<br>        <span class="hljs-keyword">if</span>(res.s[i]&lt;<span class="hljs-number">0</span>)<br>        &#123;<br>            res.s[i]+=<span class="hljs-number">10</span>;<br>            res.s[i+<span class="hljs-number">1</span>]--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(res.s[len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;len&gt;<span class="hljs-number">1</span>)len--;<br>    res.len=len;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*(可选)除法运算符重载(注意:减法和乘法运算和&gt;=运算符必选)*/</span><br>bign <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,len=a.len;<br>    bign res,f;<br>    <span class="hljs-keyword">for</span>(i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        f=f*<span class="hljs-number">10</span>;<br>        f.s[<span class="hljs-number">0</span>]=a.s[i];<br>        <span class="hljs-keyword">while</span>(f&gt;=b)<br>        &#123;<br>            f=f-b;<br>            res.s[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(res.s[len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;len&gt;<span class="hljs-number">1</span>)len--;<br>    res.len=len;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">/*(可选)模运算符重载(注意:减法和乘法运算和&gt;=运算符必选)*/</span><br>bign <span class="hljs-keyword">operator</span>%(<span class="hljs-type">const</span> bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    <span class="hljs-type">int</span> i,len=a.len;<br>    bign res,f;<br>    <span class="hljs-keyword">for</span>(i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        f=f*<span class="hljs-number">10</span>;<br>        f.s[<span class="hljs-number">0</span>]=a.s[i];<br>        <span class="hljs-keyword">while</span>(f&gt;=b)<br>        &#123;<br>            f=f-b;<br>            res.s[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><span class="hljs-comment">/*(可选)X等运算符重载(注意:X法必选)*/</span><br>bign&amp; <span class="hljs-keyword">operator</span>+=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a+b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>-=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a-b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>*=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a*b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>/=(bign&amp; a,<span class="hljs-type">const</span> bign&amp; b)<br>&#123;<br>    a=a/b;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-comment">/*可选前缀++/--与后缀++/--(注意:加法必选)*/</span><br>bign&amp; <span class="hljs-keyword">operator</span>++(bign&amp; a)<br>&#123;<br>    a=a+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>++(bign&amp; a,<span class="hljs-type">int</span>)<br>&#123;<br>    bign t=a;<br>    a=a+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>--(bign&amp; a)<br>&#123;<br>    a=a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>bign&amp; <span class="hljs-keyword">operator</span>--(bign&amp; a,<span class="hljs-type">int</span>)<br>&#123;<br>    bign t=a;<br>    a=a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp;in,bign&amp; x)<br>&#123;<br>    string s;<br>    in&gt;&gt;s;<br>    x=s.<span class="hljs-built_in">c_str</span>();<br>    <span class="hljs-keyword">return</span> in;<br>&#125;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;out,<span class="hljs-type">const</span> bign&amp; x)<br>&#123;<br>    out&lt;&lt;x.<span class="hljs-built_in">str</span>();<br>    <span class="hljs-keyword">return</span> out;<br>&#125;<br>bign f[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br>bign pow2[<span class="hljs-number">201</span>];<br><span class="hljs-function">bign <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    bign ans=pow2[n-k];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n-k+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        ans+=(pow2[n-k<span class="hljs-number">-1</span>]-pow2[n-i-k+<span class="hljs-number">1</span>]*f[i<span class="hljs-number">-2</span>][k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    pow2[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">200</span>;i++)<br>        pow2[i]=pow2[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>        f[<span class="hljs-number">0</span>][i]=<span class="hljs-number">0</span>;<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>            f[i][j]=<span class="hljs-built_in">solve</span>(i,j);<br>    &#125;<br>    <span class="hljs-type">int</span> n,k;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>    &#123;<br>        cout&lt;&lt;f[n][k]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P0008"><a href="#P0008" class="headerlink" title="P0008"></a>P0008</h4><p>不会写,暂存</p><h4 id="P0009-The-King’s-Ups-and-Downs"><a href="#P0009-The-King’s-Ups-and-Downs" class="headerlink" title="P0009 The King’s Ups and Downs"></a>P0009 <strong>The King’s Ups and Downs</strong></h4><p>题目:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The king wants <span class="hljs-built_in">to</span> know how many guards he needs so he can have <span class="hljs-keyword">a</span> different up <span class="hljs-keyword">and</span> down order <span class="hljs-keyword">at</span> <span class="hljs-keyword">each</span> changing <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> guard <span class="hljs-keyword">for</span> rest <span class="hljs-keyword">of</span> his reign. To be able <span class="hljs-built_in">to</span> <span class="hljs-built_in">do</span> this, he needs <span class="hljs-built_in">to</span> know <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> given <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> guards, n, how many different up <span class="hljs-keyword">and</span> down orders there are:<br><br>For example, <span class="hljs-keyword">if</span> there are <span class="hljs-literal">four</span> guards: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-number">4</span> can be arrange <span class="hljs-keyword">as</span>:<br><br><span class="hljs-number">1324</span>, <span class="hljs-number">2143</span>, <span class="hljs-number">3142</span>, <span class="hljs-number">2314</span>, <span class="hljs-number">3412</span>, <span class="hljs-number">4231</span>, <span class="hljs-number">4132</span>, <span class="hljs-number">2413</span>, <span class="hljs-number">3241</span>, <span class="hljs-number">1423</span><br><br>For this problem, you will <span class="hljs-built_in">write</span> <span class="hljs-keyword">a</span> program that takes <span class="hljs-keyword">as</span> input <span class="hljs-keyword">a</span> positive <span class="hljs-keyword">integer</span> n, <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> guards <span class="hljs-keyword">and</span> returns <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> up <span class="hljs-keyword">and</span> down orders <span class="hljs-keyword">for</span> n guards <span class="hljs-keyword">of</span> differing heights.<br><br>给一个n,求n个高矮不同的人排成一排使得高、矮依次排列的种数。<br></code></pre></td></tr></table></figure><p>题目大意就是给定n个数字,各不相同,排列成高低高低高低或者低高低高低高情况有多少种</p><ul><li><p>n个数字不相同,那么肯定可以按照递增排列出来,于是考虑按照递增来增加人数,已经有i-1个人的情况下,第i个人加入进来,因为是最高的,所以插入到队伍里面的时候,前面的序列必然是以高低结尾,后面序列是以低高开始.设插入位置前面有j个人,那么后面就有i-j-1个人.</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">设ans<span class="hljs-selector-attr">[i]</span>为<span class="hljs-selector-tag">i</span>个人按照所需排列的情况数目,dp<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[0]</span>表示<span class="hljs-selector-tag">i</span>个人已经排列好并且结尾为高低的情况,dp<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[1]</span>表示<span class="hljs-selector-tag">i</span>个人已经排列好并且开头为低高的情况<br></code></pre></td></tr></table></figure></li><li><p>因为可以插入在任意位置,j可以任意取,于是有组合数C[i-1] [j] 种情况,于是ans[i] &#x3D; dp[j] [0] * dp[i-j-1] [1] * C[i-1] [j]</p></li><li><pre><code class="c">  //这里有一点:  C[i][j] = C[i-1][j-1] + C[i-1][j]  //思路就是所取的数中含有特定的数或者不含有特定的数  <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><br>* 把i个士兵排好后无非两种情况。开始为低高。开始为高低。那么排列的逆序也满足条件。也就是说结尾为高低的方法数和开始为低高的方法数相同。而对于人数一定的情况。开始为低高的人数和开始为高低的人数相等。<br><br>* ```<br>于是 dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=ans<span class="hljs-comment">[i]</span>/2<br></code></pre></td></tr></table></figure></code></pre></li></ul><p><a href="https://blog.csdn.net/ZCY19990813/article/details/88852983?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-88852983-blog-120627982.235%5Ev38%5Epc_relevant_sort_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=4">题解</a></p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;bits/s</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll dp[<span class="hljs-number">22</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">22</span>][<span class="hljs-number">22</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t,i,j;<br>    c[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    c[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>    &#123;<br>        c[i][<span class="hljs-number">0</span>]=c[i][i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>            c[i][j]=c[i<span class="hljs-number">-1</span>][j]+c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    &#125;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>    &#123;<br>        t=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>            t+=dp[j][<span class="hljs-number">0</span>]*dp[i-j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]*c[i<span class="hljs-number">-1</span>][j];<br>        dp[i][<span class="hljs-number">0</span>]=dp[i][<span class="hljs-number">1</span>]=t/<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll T,i,j,e,n,t;<br>    <span class="hljs-built_in">f</span>();<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        cin&gt;&gt;e&gt;&gt;n;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            cout&lt;&lt;e&lt;&lt;<span class="hljs-string">&quot; 1&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;e&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;dp[n][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FPGA</title>
    <link href="/2023/05/21/FPGA/"/>
    <url>/2023/05/21/FPGA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>You Only Live Once</title>
    <link href="/2023/04/24/thoughts/"/>
    <url>/2023/04/24/thoughts/</url>
    
    <content type="html"><![CDATA[<h3 id="4-22-0-54-AM"><a href="#4-22-0-54-AM" class="headerlink" title="4.22&#x2F;&#x2F;0:54 AM"></a>4.22&#x2F;&#x2F;0:54 AM</h3><p>酒馆里消沉</p><p>究竟是什么样的意志,能够让人始终坚持一件事?,我不知道,但是我想知道…</p><p>4.24&#x2F;&#x2F;9:51</p><p>再次精神内耗…原因说到底还是自己太懒散了,不够专注<br>总是会逃避,不由自主的逃避…逃避这个逃避那个,用一些没有营养的视频麻醉自己<br>这样下去<br>你会死在武汉<br>你的理想会死在武汉的季节更替里<br>你的一切你值得骄傲的东西,都会离你而去<br>想想你的父母,想想你的处境<br>到底还要怎样你才能真正的克服惰性?</p><hr><h3 id="11-8-2-16-PM"><a href="#11-8-2-16-PM" class="headerlink" title="11.8&#x2F;&#x2F;2:16 PM"></a>11.8&#x2F;&#x2F;2:16 PM</h3><p>看到大半年前颓丧时写的一些自我否定的牢骚话,很是汗颜😥,又是半年过去,感觉还是一事无成<br>但是仔细回想,好像又完成了许多看不到的事情…虽然知识还是没学到什么,但是感觉看不见的素养再增加…<br>这半年干的觉得最有趣的事情就是装arch了,另外试了试wsl,虽然图形化界面还是依托答辩,但是至少能用命令行了<br>对linux系的发行版都做了些许尝试,感觉自己特别喜欢装系统,对这些折腾来折腾去的东西生不出反感怎么回事…😂<br>正在学rust,感觉真的挺牛逼的这语言;但是想起来自己连c&#x2F;c++,python都没掌握多好,又去学更新的,多少有点<em>好高骛远</em>了<br>还是得踏踏实实学习吧…</p><p>这学期他妈的,开的这些课倒是重要的话,老师讲的都是依托,我就很不能理解,明明国外这些课程都有很好的教材,为什么要自己嚼过一遍然后做成烂的要死的ppt然后照着读,纯傻呗!还自己写教材,纯脑缠.😅总结就是还得自己学,反正加权已经炸了,还在乎什么;自己学到的才是真的!</p><p>emmm,其他方面的话,感觉还是疏于对自己技术,理解方面的提升吧,决定了的看书又没看完几本…还是要努力啊,不能老是摆烂<br>身边哥几个都谈了npy,哥们还是铁树难开花,难绷,还是寄情感于我亲爱的电脑吧🤣<br>后面一段时间,多学点技术,多看点书吧,有事没事写点感悟(牢骚话),总比浑浑噩噩刷jb烂视频好…<br>就这样<br>哦对了,还有一个就是lng输了T1给我气坏了,妈的,还是得降低预期我只能说</p><hr><h3 id="11-12-0-38-AM"><a href="#11-12-0-38-AM" class="headerlink" title="11.12&#x2F;&#x2F;0:38 AM"></a>11.12&#x2F;&#x2F;0:38 AM</h3><p>前几天去参加了开源工坊的活动,完成了一项有关于RUSTSBI的任务(姑且算是完成了吧…)</p><p>在基本上什么都不懂的情况下,照猫画虎的完成了几十行调用现成接口的函数,为 sbi-rt这个子项目的CPPC扩展提供了些许的支持(微不足道);</p><p>重点不是在代码方面,rust不会可以学,重点在态度方面!我的态度属于比较懒散的,不是很上心的去做,提交commit的格式以及内容要求在文档里面都有写,但是我没有仔细阅读,或者说读了也没在意.这也就导致了我在一个小小的模块修改上面提交了三次commit(汗颜),还没有添加signed-off-by…在被蒋学长一顿训之后,学习了git commit的相关操作知识以及一些常识问题比如,cargo fmt,以及写文档的标准问题.甚至是提交标题</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">CPPC:</span>blahblah<br></code></pre></td></tr></table></figure><p>这里的<strong>CPPC:</strong>　冒号后面都要打上一个空格…不得不说学长实在是严谨我的态度还是有点太无所谓了,以后一定要注意!</p><p>今天看BLG打WBG,下午四点开打.早上睡到十一点半,吃个饭磨磨蹭蹭到一点多了,然后就准备看比赛,就没学什么了,后面看两个队打的时候反而没什么意思,朋友大多支持WBG,而我没有多么偏向,甚至还想BLG赢不知道为啥…两个队谁赢我都喜欢,毕竟也就世界赛看看,算是半个云观赛手了哈哈</p><p>晚上数模国赛结果出来了,省二,整个学院除了我们这仨彩笔省二其他大佬竟然没一个上省二,有点没想到….说实话还有点小小的骄傲,觉得自己很牛,什么都不会直接开始比赛,然后就超过一群佬拿了省二,还是很提振信心的.不过说实话没啥暖用,省二加0.5分微乎其微,还是不想这些有的没的了…</p><p>19号csp选拔,屁都不会,说好每天写算法题也没做到…十二月就要考了,还是零基础,太废物了….还有os,编译原理,软件安全一众课程没学…能力还是太差了…自我约束力也不够</p><p>不写了,鞭策自己去看逆向工程了,奥里给</p><hr><h3 id="11-13-3-49-PM"><a href="#11-13-3-49-PM" class="headerlink" title="11.13&#x2F;&#x2F;3:49 PM"></a>11.13&#x2F;&#x2F;3:49 PM</h3><p>下午刷了两个MC的长视频,一个是<a href="https://www.bilibili.com/video/BV1XF41117Eq/?spm_id_from=333.880.my_history.page.click&vd_source=3f137d88bc692ff15cffaebe2e7998fc">一物品栏一血</a> 另一个是<a href="https://www.bilibili.com/video/BV1DH4y1D7sJ/?spm_id_from=333.1007.tianma.1-1-1.click&vd_source=3f137d88bc692ff15cffaebe2e7998fc">虚空开局速通</a> </p><p>都是很极限很用心的视频,尤其是第二个视频,令我感慨颇深,三连奉上!</p><p>过程本身,就很有意义!</p>]]></content>
    
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>photo</title>
    <link href="/2023/04/10/photo/"/>
    <url>/2023/04/10/photo/</url>
    
    <content type="html"><![CDATA[<p>  <img src="/2023/04/10/photo/wallhaven-mpl1ek.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>wallpaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
