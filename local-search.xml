<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vim使用技巧</title>
    <link href="/2023/11/09/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/11/09/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="vim使用记录"><a href="#vim使用记录" class="headerlink" title="vim使用记录"></a>vim使用记录</h1><h2 id="1-基础模式"><a href="#1-基础模式" class="headerlink" title="1.基础模式"></a>1.基础模式</h2><ul><li>normal模式:idle状态</li><li>insert模式:<ul><li><strong>i</strong>   光标前</li><li><strong>a</strong>       光标后</li></ul></li><li>replace模式:R</li><li>选取模式<ul><li>visual:<strong>v</strong></li><li>visual-line:<strong>shift-v</strong></li><li>visual-block:<strong>CTRL-v</strong></li></ul></li><li>command-line:<strong>:</strong></li></ul><h2 id="2-指令拾遗"><a href="#2-指令拾遗" class="headerlink" title="2.指令拾遗"></a>2.指令拾遗</h2><ul><li><p>多个窗口查看一片或者多片buffer:</p><ul><li><strong>:sp</strong>:创建另一个窗口查看当前的文件</li><li><strong>tabnew</strong>:</li><li><strong>gt:shift between those tabs</strong></li></ul></li><li><p>normal模式查找某个word:</p><ul><li><strong>&#x2F;main</strong> means find the ‘main’,enter to get there,and ‘n’ for the next ‘main’</li></ul></li><li><p>normal模式下移动指令</p><ul><li>hjkl左下上右</li><li>w一个词一个词向后,b一个词一个词向前,e跳到光标所在词词尾</li><li><strong>0</strong>移动到句首,**$**移动到句尾,<strong>^</strong>移动到本行行首第一个非空白字符</li><li>ctrl+u &#x3D;&#x3D; pgup ,ctrl+d &#x3D;&#x3D; pgdn</li><li>‘H’光标移动到屏幕最顶端,’M’屏幕中间,’L’屏幕底端</li><li>gg文件开头,G文件末尾</li><li>line_number:<strong>:{number}<CR></CR></strong> or  <strong>{number}G</strong></li><li>find:fo查找本行光标后第一个o,Fo查找本行光标前第一个o</li><li>To:tr前往本行光标后第一个r前,Tr前往本行光标前第一个r后</li></ul></li><li><p>normal模式下编辑指令</p><ul><li>o:open a new line and get into insert mode</li><li>d:delete:<ul><li><strong>dw</strong>:delete a word</li><li><strong>de</strong>:delete til the end of this word.<strong>db</strong>:delete back to the begining of this word</li><li><strong>ce</strong>:delete the word and get into the insert mode</li><li><strong>dd</strong>:delete the whole line</li><li><strong>cc</strong>:delete the whole line and insert</li></ul></li><li>x:just <strong>delete</strong> the char that you are working on</li><li>r:take another argument and replace the char you’re working on</li><li>u:undo:equals to ctrl+z</li><li>ctrl+r:reverse the undo</li><li>y,p:yank and paste<ul><li><strong>yw</strong>:yank a word</li><li><strong>yy</strong>:yank the whole line</li><li><strong>yb</strong>:复制光标前单词.<strong>ye</strong>:复制光标后单词</li><li><strong>p</strong>:paste</li></ul></li></ul></li><li><p>visual模式</p><ul><li>进入visual 模式后,hjkl以及其他的移动指令都会选取从光标开始的所有文本</li><li>进入visual block模式,移动指令可以选取文本块</li><li>visual line模式:选取文本行</li></ul></li><li><p>重复性工作</p><p>使用    ‘.’     <strong>可以在新的光标处重复你 的上一个编辑工作</strong></p></li></ul><h3 id="计数指令执行"><a href="#计数指令执行" class="headerlink" title="计数指令执行"></a>计数指令执行</h3><p>举例:移动四行:normal模式下:4j(下移4行)</p><p>向后移动4个word:4w</p><p>等等</p><h3 id="修饰符a-i"><a href="#修饰符a-i" class="headerlink" title="修饰符a,i"></a>修饰符a,i</h3><p>a for  around(including) and i for inside</p><p>for example:</p><p><strong>di(</strong> means delete things inside the “()”</p><p><strong>ci[</strong> means change things inside the”[]”</p><p><strong>da(</strong> means delete things inside the “()”  including “()”</p><p><strong>ci”</strong> means change things inside the “”</p><p><em>后续待补充</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>The missing semester</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cargo</title>
    <link href="/2023/11/08/cargo/"/>
    <url>/2023/11/08/cargo/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/11/08/algorithm/"/>
    <url>/2023/11/08/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="DP问题"><a href="#DP问题" class="headerlink" title="DP问题"></a>DP问题</h1><ol><li><p>折线分割平面问题</p><p> 题目:</p><p><img src="/2023/11/08/algorithm/image-20231108174122624.png" alt="image-20231108174122624"></p><p>明确几点:</p><ul><li>增加第n条折线,要想让分割平面尽可能多,折线的两个射线边必须要和之前 n-1 条折线都相交,在这两条射线上各自形成2(n-1)个交点.也就是各自形成了2(n-1)条线段和两条被截短的射线</li><li>每形成一个线段,就会增加一个平面,每增加一个射线就会增加一个平面</li><li>最重要的是别忘了折线的角所在点所衍生了两个线段,但是<em>就增加一个平面</em></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">递推关系:<br><span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(n)</span></span> = <span class="hljs-built_in">f</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-number">4</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lishuhuakai/article/details/8518245">具体解析</a></p></li><li><p>健身房卡路里问题</p><p> 题目:</p> <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">夏天要到了，小西和小瓜决定去健身。健身房是一个n行m列的矩阵。a[i][j]代表在第i行第j列，可以消耗的卡路里。<br><br>小西从第1行第1列出发，要到(n,m);小西可以从a[i][j]，走到a[i+1][j],或者a[i][j+1];<br><br>小瓜从(n,1)出发，要到(1,m);小瓜可以从a[i][j]出发，走到a[i-1][j],或者a[i][j+1];<br><br>由于小西和小瓜要聚在一起发张自拍，他们必须在健身房的某一行，某一列相遇（仅相遇一次）。由于他们没有好好健身，所以在自拍地点的卡路里消耗不计入总卡路里消耗值。你的任务是求出小西和小瓜可以消耗的最大总卡路里值。<br><br>输入描述<br>第一行包含两个整数，n,m(3&lt;=n,m&lt;=1000)，代表健身房的行、列数，接下来的i行j列代表a[i][j]（(0&lt;=a[i][j]&lt;=10<span class="hljs-built_in">^</span>5），即在第i行，j列可以燃烧的卡路里。<br><br>输出描述<br>输出一个整数：即他们可能消耗的总卡路里的总和的最大值。<br></code></pre></td></tr></table></figure><p> <img src="/2023/11/08/algorithm/image-20231109010759333.png" alt="image-20231109010759333"></p><p> 题解:</p> <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">显然，设两人在<span class="hljs-built_in">O</span>点相遇，<span class="hljs-variable">lahub</span>只能从<span class="hljs-number">1</span>或者<span class="hljs-number">2</span>走到<span class="hljs-built_in">O</span>，如果他从<span class="hljs-number">1</span>走到<span class="hljs-built_in">O</span>，那他的路线就是<span class="hljs-number">1</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">3</span>，则<span class="hljs-variable">Iahubina</span>就是<span class="hljs-number">4</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">2</span>，同理可知，若<span class="hljs-variable">lahub</span>是从<span class="hljs-number">2</span>走到<span class="hljs-built_in">O</span>，他的路线一定是<span class="hljs-number">2</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">4</span><span class="hljs-operator">,</span><span class="hljs-variable">Iahubina</span>就是<span class="hljs-number">1</span><span class="hljs-operator">=&gt;</span><span class="hljs-built_in">O</span><span class="hljs-operator">=&gt;</span><span class="hljs-number">3</span>。<br><br>所以，易得出最终解为<span class="hljs-variable">max</span>（<span class="hljs-variable">A</span>到<span class="hljs-number">1</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">3</span>到<span class="hljs-built_in">C</span>最大值<span class="hljs-operator">+</span><span class="hljs-built_in">D</span>到<span class="hljs-number">4</span>最大 值<span class="hljs-operator">+</span><span class="hljs-number">2</span>到<span class="hljs-variable">B</span>的最大值，<span class="hljs-variable">A</span>到<span class="hljs-number">2</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">4</span>到<span class="hljs-built_in">C</span>最大 值<span class="hljs-operator">+</span><span class="hljs-built_in">D</span>到<span class="hljs-number">1</span>最大值<span class="hljs-operator">+</span><span class="hljs-number">3</span>到<span class="hljs-variable">B</span>最大值）。<br></code></pre></td></tr></table></figure><p> <a href="https://www.luogu.com.cn/problem/solution/CF429B">题目详解</a></p></li></ol><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp1[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp2[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp3[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>],dp4[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<span class="hljs-comment">//用四个dp数组存放最大值</span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;a[i][j]);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">memset</span>(dp1,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp1));<br><span class="hljs-built_in">memset</span>(dp2,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp2));<br><span class="hljs-built_in">memset</span>(dp3,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp3));<br><span class="hljs-built_in">memset</span>(dp4,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp4));<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        dp1[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp1[i<span class="hljs-number">-1</span>][j],dp1[i][j<span class="hljs-number">-1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>        dp2[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp2[i+<span class="hljs-number">1</span>][j],dp2[i][j+<span class="hljs-number">1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>        dp3[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp3[i+<span class="hljs-number">1</span>][j],dp3[i][j<span class="hljs-number">-1</span>]);&#125;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>        dp4[i][j]=a[i][j]+<span class="hljs-built_in">max</span>(dp4[i<span class="hljs-number">-1</span>][j],dp4[i][j+<span class="hljs-number">1</span>]);&#125;&#125;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;m;j++)<br>        &#123;<br>        x=<span class="hljs-built_in">max</span>(x,dp1[i][j<span class="hljs-number">-1</span>]+dp2[i][j+<span class="hljs-number">1</span>]+dp3[i+<span class="hljs-number">1</span>][j]+dp4[i<span class="hljs-number">-1</span>][j]);<br>        x=<span class="hljs-built_in">max</span>(x,dp1[i<span class="hljs-number">-1</span>][j]+dp2[i+<span class="hljs-number">1</span>][j]+dp3[i][j<span class="hljs-number">-1</span>]+dp4[i][j+<span class="hljs-number">1</span>]);&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FPGA</title>
    <link href="/2023/05/21/FPGA/"/>
    <url>/2023/05/21/FPGA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>YOLO</title>
    <link href="/2023/04/24/thoughts/"/>
    <url>/2023/04/24/thoughts/</url>
    
    <content type="html"><![CDATA[<p>4.22&#x2F;&#x2F;0:54</p><p>酒馆里消沉</p><p>究竟是什么样的意志,能够让人始终坚持一件事?,我不知道,但是我想知道…</p><p>4.24&#x2F;&#x2F;9:51</p><p>再次精神内耗…原因说到底还是自己太懒散了,不够专注<br>总是会逃避,不由自主的逃避…逃避这个逃避那个,用一些没有营养的视频麻醉自己<br>这样下去<br>你会死在武汉<br>你的理想会死在武汉的季节更替里<br>你的一切你值得骄傲的东西,都会离你而去<br>想想你的父母,想想你的处境<br>到底还要怎样你才能真正的克服惰性?</p><p>11.8&#x2F;&#x2F;2:16<br>看到大半年前颓丧时写的一些自我否定的牢骚话,很是汗颜😥,又是半年过去,感觉还是一事无成<br>但是仔细回想,好像又完成了许多看不到的事情…虽然知识还是没学到什么,但是感觉看不见的素养再增加…<br>这半年干的觉得最有趣的事情就是装arch了,另外试了试wsl,虽然图形化界面还是依托答辩,但是至少能用命令行了<br>对linux系的发行版都做了些许尝试,感觉自己特别喜欢装系统,对这些折腾来折腾去的东西生不出反感怎么回事…😂<br>正在学rust,感觉真的挺牛逼的这语言;但是想起来自己连c&#x2F;c++,python都没掌握多好,又去学更新的,多少有点<em>好高骛远</em>了<br>还是得踏踏实实学习吧…</p><p>这学期他妈的,开的这些课倒是重要的话,老师讲的都是依托,我就很不能理解,明明国外这些课程都有很好的教材,为什么要自己嚼过一遍然后做成烂的要死的ppt然后照着读,纯傻呗!还自己写教材,纯脑缠.😅总结就是还得自己学,反正加权已经炸了,还在乎什么;自己学到的才是真的!</p><p>emmm,其他方面的话,感觉还是疏于对自己技术,理解方面的提升吧,决定了的看书又没看完几本…还是要努力啊,不能老是摆烂<br>身边哥几个都谈了npy,哥们还是铁树难开花,难绷,还是寄情感于我亲爱的电脑吧🤣<br>后面一段时间,多学点技术,多看点书吧,有事没事写点感悟(牢骚话),总比浑浑噩噩刷jb烂视频好…<br>就这样<br>哦对了,还有一个就是lng输了T1给我气坏了,妈的,还是得降低预期我只能说</p>]]></content>
    
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>photo</title>
    <link href="/2023/04/10/photo/"/>
    <url>/2023/04/10/photo/</url>
    
    <content type="html"><![CDATA[<p>  <img src="/2023/04/10/photo/wallhaven-mpl1ek.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>wallpaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
